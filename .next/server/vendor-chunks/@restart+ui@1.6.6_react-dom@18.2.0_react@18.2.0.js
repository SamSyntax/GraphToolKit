"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0";
exports.ids = ["vendor-chunks/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/Anchor.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/Anchor.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.isTrivialHref = isTrivialHref;\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _hooks = __webpack_require__(/*! @restart/hooks */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/index.js\");\nvar _Button = __webpack_require__(/*! ./Button */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/Button.js\");\nvar _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nconst _excluded = [\n    \"onKeyDown\"\n];\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction isTrivialHref(href) {\n    return !href || href.trim() === \"#\";\n}\n/**\n * An generic `<a>` component that covers a few A11y cases, ensuring that\n * cases where the `href` is missing or trivial like \"#\" are treated like buttons.\n */ const Anchor = /*#__PURE__*/ React.forwardRef((_ref, ref)=>{\n    let { onKeyDown } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const [buttonProps] = (0, _Button.useButtonProps)(Object.assign({\n        tagName: \"a\"\n    }, props));\n    const handleKeyDown = (0, _hooks.useEventCallback)((e)=>{\n        buttonProps.onKeyDown(e);\n        onKeyDown == null ? void 0 : onKeyDown(e);\n    });\n    if (isTrivialHref(props.href) || props.role === \"button\") {\n        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"a\", Object.assign({\n            ref: ref\n        }, props, buttonProps, {\n            onKeyDown: handleKeyDown\n        }));\n    }\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"a\", Object.assign({\n        ref: ref\n    }, props, {\n        onKeyDown: onKeyDown\n    }));\n});\nAnchor.displayName = \"Anchor\";\nvar _default = Anchor;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/Anchor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/Button.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/Button.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.isTrivialHref = isTrivialHref;\nexports.useButtonProps = useButtonProps;\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nconst _excluded = [\n    \"as\",\n    \"disabled\"\n];\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction isTrivialHref(href) {\n    return !href || href.trim() === \"#\";\n}\nfunction useButtonProps({ tagName, disabled, href, target, rel, role, onClick, tabIndex = 0, type }) {\n    if (!tagName) {\n        if (href != null || target != null || rel != null) {\n            tagName = \"a\";\n        } else {\n            tagName = \"button\";\n        }\n    }\n    const meta = {\n        tagName\n    };\n    if (tagName === \"button\") {\n        return [\n            {\n                type: type || \"button\",\n                disabled\n            },\n            meta\n        ];\n    }\n    const handleClick = (event)=>{\n        if (disabled || tagName === \"a\" && isTrivialHref(href)) {\n            event.preventDefault();\n        }\n        if (disabled) {\n            event.stopPropagation();\n            return;\n        }\n        onClick == null ? void 0 : onClick(event);\n    };\n    const handleKeyDown = (event)=>{\n        if (event.key === \" \") {\n            event.preventDefault();\n            handleClick(event);\n        }\n    };\n    if (tagName === \"a\") {\n        // Ensure there's a href so Enter can trigger anchor button.\n        href || (href = \"#\");\n        if (disabled) {\n            href = undefined;\n        }\n    }\n    return [\n        {\n            role: role != null ? role : \"button\",\n            // explicitly undefined so that it overrides the props disabled in a spread\n            // e.g. <Tag {...props} {...hookProps} />\n            disabled: undefined,\n            tabIndex: disabled ? undefined : tabIndex,\n            href,\n            target: tagName === \"a\" ? target : undefined,\n            \"aria-disabled\": !disabled ? undefined : disabled,\n            rel: tagName === \"a\" ? rel : undefined,\n            onClick: handleClick,\n            onKeyDown: handleKeyDown\n        },\n        meta\n    ];\n}\nconst Button = /*#__PURE__*/ React.forwardRef((_ref, ref)=>{\n    let { as: asProp, disabled } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const [buttonProps, { tagName: Component }] = useButtonProps(Object.assign({\n        tagName: asProp,\n        disabled\n    }, props));\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(Component, Object.assign({}, props, buttonProps, {\n        ref: ref\n    }));\n});\nButton.displayName = \"Button\";\nvar _default = Button;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/Button.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DataKey.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DataKey.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nexports.__esModule = true;\nexports.dataAttr = dataAttr;\nexports.dataProp = dataProp;\nexports.PROPERTY_PREFIX = exports.ATTRIBUTE_PREFIX = void 0;\nconst ATTRIBUTE_PREFIX = `data-rr-ui-`;\nexports.ATTRIBUTE_PREFIX = ATTRIBUTE_PREFIX;\nconst PROPERTY_PREFIX = `rrUi`;\nexports.PROPERTY_PREFIX = PROPERTY_PREFIX;\nfunction dataAttr(property) {\n    return `${ATTRIBUTE_PREFIX}${property}`;\n}\nfunction dataProp(property) {\n    return `${PROPERTY_PREFIX}${property}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy9EYXRhS2V5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLGtCQUFrQixHQUFHO0FBQ3JCQSxnQkFBZ0IsR0FBR0U7QUFDbkJGLGdCQUFnQixHQUFHRztBQUNuQkgsdUJBQXVCLEdBQUdBLHdCQUF3QixHQUFHLEtBQUs7QUFDMUQsTUFBTUssbUJBQW1CLENBQUMsV0FBVyxDQUFDO0FBQ3RDTCx3QkFBd0IsR0FBR0s7QUFDM0IsTUFBTUQsa0JBQWtCLENBQUMsSUFBSSxDQUFDO0FBQzlCSix1QkFBdUIsR0FBR0k7QUFDMUIsU0FBU0YsU0FBU0ksUUFBUTtJQUN4QixPQUFPLENBQUMsRUFBRUQsaUJBQWlCLEVBQUVDLFNBQVMsQ0FBQztBQUN6QztBQUNBLFNBQVNILFNBQVNHLFFBQVE7SUFDeEIsT0FBTyxDQUFDLEVBQUVGLGdCQUFnQixFQUFFRSxTQUFTLENBQUM7QUFDeEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbTM2NS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcmVzdGFydCt1aUAxLjYuNl9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvQHJlc3RhcnQvdWkvY2pzL0RhdGFLZXkuanM/ZTI1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGF0YUF0dHIgPSBkYXRhQXR0cjtcbmV4cG9ydHMuZGF0YVByb3AgPSBkYXRhUHJvcDtcbmV4cG9ydHMuUFJPUEVSVFlfUFJFRklYID0gZXhwb3J0cy5BVFRSSUJVVEVfUFJFRklYID0gdm9pZCAwO1xuY29uc3QgQVRUUklCVVRFX1BSRUZJWCA9IGBkYXRhLXJyLXVpLWA7XG5leHBvcnRzLkFUVFJJQlVURV9QUkVGSVggPSBBVFRSSUJVVEVfUFJFRklYO1xuY29uc3QgUFJPUEVSVFlfUFJFRklYID0gYHJyVWlgO1xuZXhwb3J0cy5QUk9QRVJUWV9QUkVGSVggPSBQUk9QRVJUWV9QUkVGSVg7XG5mdW5jdGlvbiBkYXRhQXR0cihwcm9wZXJ0eSkge1xuICByZXR1cm4gYCR7QVRUUklCVVRFX1BSRUZJWH0ke3Byb3BlcnR5fWA7XG59XG5mdW5jdGlvbiBkYXRhUHJvcChwcm9wZXJ0eSkge1xuICByZXR1cm4gYCR7UFJPUEVSVFlfUFJFRklYfSR7cHJvcGVydHl9YDtcbn0iXSwibmFtZXMiOlsiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJkYXRhQXR0ciIsImRhdGFQcm9wIiwiUFJPUEVSVFlfUFJFRklYIiwiQVRUUklCVVRFX1BSRUZJWCIsInByb3BlcnR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DataKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/Dropdown.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/Dropdown.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar _querySelectorAll = _interopRequireDefault(__webpack_require__(/*! dom-helpers/querySelectorAll */ \"(ssr)/./node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/querySelectorAll.js\"));\nvar _addEventListener = _interopRequireDefault(__webpack_require__(/*! dom-helpers/addEventListener */ \"(ssr)/./node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/addEventListener.js\"));\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _uncontrollable = __webpack_require__(/*! uncontrollable */ \"(ssr)/./node_modules/.pnpm/uncontrollable@8.0.4_react@18.2.0/node_modules/uncontrollable/lib/esm/index.js\");\nvar _usePrevious = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/usePrevious */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/usePrevious.js\"));\nvar _useForceUpdate = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useForceUpdate */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useForceUpdate.js\"));\nvar _useEventListener = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useEventListener */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useEventListener.js\"));\nvar _useEventCallback = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useEventCallback */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useEventCallback.js\"));\nvar _DropdownContext = _interopRequireDefault(__webpack_require__(/*! ./DropdownContext */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownContext.js\"));\nvar _DropdownMenu = _interopRequireDefault(__webpack_require__(/*! ./DropdownMenu */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownMenu.js\"));\nvar _DropdownToggle = _interopRequireWildcard(__webpack_require__(/*! ./DropdownToggle */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownToggle.js\"));\nvar _DropdownItem = _interopRequireDefault(__webpack_require__(/*! ./DropdownItem */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownItem.js\"));\nvar _SelectableContext = _interopRequireDefault(__webpack_require__(/*! ./SelectableContext */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/SelectableContext.js\"));\nvar _DataKey = __webpack_require__(/*! ./DataKey */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DataKey.js\");\nvar _useWindow = _interopRequireDefault(__webpack_require__(/*! ./useWindow */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/useWindow.js\"));\nvar _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction useRefWithUpdate() {\n    const forceUpdate = (0, _useForceUpdate.default)();\n    const ref = (0, React.useRef)(null);\n    const attachRef = (0, React.useCallback)((element)=>{\n        ref.current = element;\n        // ensure that a menu set triggers an update for consumers\n        forceUpdate();\n    }, [\n        forceUpdate\n    ]);\n    return [\n        ref,\n        attachRef\n    ];\n}\n/**\n * @displayName Dropdown\n * @public\n */ function Dropdown({ defaultShow, show: rawShow, onSelect, onToggle: rawOnToggle, itemSelector = `* [${(0, _DataKey.dataAttr)(\"dropdown-item\")}]`, focusFirstItemOnShow, placement = \"bottom-start\", children }) {\n    const window = (0, _useWindow.default)();\n    const [show, onToggle] = (0, _uncontrollable.useUncontrolledProp)(rawShow, defaultShow, rawOnToggle);\n    // We use normal refs instead of useCallbackRef in order to populate the\n    // the value as quickly as possible, otherwise the effect to focus the element\n    // may run before the state value is set\n    const [menuRef, setMenu] = useRefWithUpdate();\n    const menuElement = menuRef.current;\n    const [toggleRef, setToggle] = useRefWithUpdate();\n    const toggleElement = toggleRef.current;\n    const lastShow = (0, _usePrevious.default)(show);\n    const lastSourceEvent = (0, React.useRef)(null);\n    const focusInDropdown = (0, React.useRef)(false);\n    const onSelectCtx = (0, React.useContext)(_SelectableContext.default);\n    const toggle = (0, React.useCallback)((nextShow, event, source = event == null ? void 0 : event.type)=>{\n        onToggle(nextShow, {\n            originalEvent: event,\n            source\n        });\n    }, [\n        onToggle\n    ]);\n    const handleSelect = (0, _useEventCallback.default)((key, event)=>{\n        onSelect == null ? void 0 : onSelect(key, event);\n        toggle(false, event, \"select\");\n        if (!event.isPropagationStopped()) {\n            onSelectCtx == null ? void 0 : onSelectCtx(key, event);\n        }\n    });\n    const context = (0, React.useMemo)(()=>({\n            toggle,\n            placement,\n            show,\n            menuElement,\n            toggleElement,\n            setMenu,\n            setToggle\n        }), [\n        toggle,\n        placement,\n        show,\n        menuElement,\n        toggleElement,\n        setMenu,\n        setToggle\n    ]);\n    if (menuElement && lastShow && !show) {\n        focusInDropdown.current = menuElement.contains(menuElement.ownerDocument.activeElement);\n    }\n    const focusToggle = (0, _useEventCallback.default)(()=>{\n        if (toggleElement && toggleElement.focus) {\n            toggleElement.focus();\n        }\n    });\n    const maybeFocusFirst = (0, _useEventCallback.default)(()=>{\n        const type = lastSourceEvent.current;\n        let focusType = focusFirstItemOnShow;\n        if (focusType == null) {\n            focusType = menuRef.current && (0, _DropdownToggle.isRoleMenu)(menuRef.current) ? \"keyboard\" : false;\n        }\n        if (focusType === false || focusType === \"keyboard\" && !/^key.+$/.test(type)) {\n            return;\n        }\n        const first = (0, _querySelectorAll.default)(menuRef.current, itemSelector)[0];\n        if (first && first.focus) first.focus();\n    });\n    (0, React.useEffect)(()=>{\n        if (show) maybeFocusFirst();\n        else if (focusInDropdown.current) {\n            focusInDropdown.current = false;\n            focusToggle();\n        }\n    // only `show` should be changing\n    }, [\n        show,\n        focusInDropdown,\n        focusToggle,\n        maybeFocusFirst\n    ]);\n    (0, React.useEffect)(()=>{\n        lastSourceEvent.current = null;\n    });\n    const getNextFocusedChild = (current, offset)=>{\n        if (!menuRef.current) return null;\n        const items = (0, _querySelectorAll.default)(menuRef.current, itemSelector);\n        let index = items.indexOf(current) + offset;\n        index = Math.max(0, Math.min(index, items.length));\n        return items[index];\n    };\n    (0, _useEventListener.default)((0, React.useCallback)(()=>window.document, [\n        window\n    ]), \"keydown\", (event)=>{\n        var _menuRef$current, _toggleRef$current;\n        const { key } = event;\n        const target = event.target;\n        const fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);\n        const fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target);\n        // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n        // in inscrutability\n        const isInput = /input|textarea/i.test(target.tagName);\n        if (isInput && (key === \" \" || key !== \"Escape\" && fromMenu || key === \"Escape\" && target.type === \"search\")) {\n            return;\n        }\n        if (!fromMenu && !fromToggle) {\n            return;\n        }\n        if (key === \"Tab\" && (!menuRef.current || !show)) {\n            return;\n        }\n        lastSourceEvent.current = event.type;\n        const meta = {\n            originalEvent: event,\n            source: event.type\n        };\n        switch(key){\n            case \"ArrowUp\":\n                {\n                    const next = getNextFocusedChild(target, -1);\n                    if (next && next.focus) next.focus();\n                    event.preventDefault();\n                    return;\n                }\n            case \"ArrowDown\":\n                event.preventDefault();\n                if (!show) {\n                    onToggle(true, meta);\n                } else {\n                    const next = getNextFocusedChild(target, 1);\n                    if (next && next.focus) next.focus();\n                }\n                return;\n            case \"Tab\":\n                // on keydown the target is the element being tabbed FROM, we need that\n                // to know if this event is relevant to this dropdown (e.g. in this menu).\n                // On `keyup` the target is the element being tagged TO which we use to check\n                // if focus has left the menu\n                (0, _addEventListener.default)(target.ownerDocument, \"keyup\", (e)=>{\n                    var _menuRef$current2;\n                    if (e.key === \"Tab\" && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {\n                        onToggle(false, meta);\n                    }\n                }, {\n                    once: true\n                });\n                break;\n            case \"Escape\":\n                if (key === \"Escape\") {\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n                onToggle(false, meta);\n                break;\n            default:\n        }\n    });\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_SelectableContext.default.Provider, {\n        value: handleSelect,\n        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_DropdownContext.default.Provider, {\n            value: context,\n            children: children\n        })\n    });\n}\nDropdown.displayName = \"Dropdown\";\nDropdown.Menu = _DropdownMenu.default;\nDropdown.Toggle = _DropdownToggle.default;\nDropdown.Item = _DropdownItem.default;\nvar _default = Dropdown;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/Dropdown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownContext.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownContext.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nconst DropdownContext = /*#__PURE__*/ React.createContext(null);\nvar _default = DropdownContext;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy9Ecm9wZG93bkNvbnRleHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsa0JBQWtCLEdBQUc7QUFDckJBLGtCQUFlLEdBQUcsS0FBSztBQUN2QixJQUFJRyxRQUFRQyx3QkFBd0JDLG1CQUFPQSxDQUFDLHFLQUFPO0FBQ25ELFNBQVNDLHlCQUF5QkMsV0FBVztJQUFJLElBQUksT0FBT0MsWUFBWSxZQUFZLE9BQU87SUFBTSxJQUFJQyxvQkFBb0IsSUFBSUQ7SUFBVyxJQUFJRSxtQkFBbUIsSUFBSUY7SUFBVyxPQUFPLENBQUNGLDJCQUEyQixTQUFVQyxXQUFXO1FBQUksT0FBT0EsY0FBY0csbUJBQW1CRDtJQUFtQixHQUFHRjtBQUFjO0FBQ3RULFNBQVNILHdCQUF3Qk8sR0FBRyxFQUFFSixXQUFXO0lBQUksSUFBSSxDQUFDQSxlQUFlSSxPQUFPQSxJQUFJVixVQUFVLEVBQUU7UUFBRSxPQUFPVTtJQUFLO0lBQUUsSUFBSUEsUUFBUSxRQUFRLE9BQU9BLFFBQVEsWUFBWSxPQUFPQSxRQUFRLFlBQVk7UUFBRSxPQUFPO1lBQUVULFNBQVNTO1FBQUk7SUFBRztJQUFFLElBQUlDLFFBQVFOLHlCQUF5QkM7SUFBYyxJQUFJSyxTQUFTQSxNQUFNQyxHQUFHLENBQUNGLE1BQU07UUFBRSxPQUFPQyxNQUFNRSxHQUFHLENBQUNIO0lBQU07SUFBRSxJQUFJSSxTQUFTLENBQUM7SUFBRyxJQUFJQyx3QkFBd0JDLE9BQU9DLGNBQWMsSUFBSUQsT0FBT0Usd0JBQXdCO0lBQUUsSUFBSyxJQUFJQyxPQUFPVCxJQUFLO1FBQUUsSUFBSVMsUUFBUSxhQUFhSCxPQUFPSSxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDWixLQUFLUyxNQUFNO1lBQUUsSUFBSUksT0FBT1Isd0JBQXdCQyxPQUFPRSx3QkFBd0IsQ0FBQ1IsS0FBS1MsT0FBTztZQUFNLElBQUlJLFFBQVNBLENBQUFBLEtBQUtWLEdBQUcsSUFBSVUsS0FBS0MsR0FBRyxHQUFHO2dCQUFFUixPQUFPQyxjQUFjLENBQUNILFFBQVFLLEtBQUtJO1lBQU8sT0FBTztnQkFBRVQsTUFBTSxDQUFDSyxJQUFJLEdBQUdULEdBQUcsQ0FBQ1MsSUFBSTtZQUFFO1FBQUU7SUFBRTtJQUFFTCxPQUFPYixPQUFPLEdBQUdTO0lBQUssSUFBSUMsT0FBTztRQUFFQSxNQUFNYSxHQUFHLENBQUNkLEtBQUtJO0lBQVM7SUFBRSxPQUFPQTtBQUFRO0FBQ255QixNQUFNVyxrQkFBa0IsV0FBVyxHQUFFdkIsTUFBTXdCLGFBQWEsQ0FBQztBQUN6RCxJQUFJQyxXQUFXRjtBQUNmMUIsa0JBQWUsR0FBRzRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb20zNjUvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy9Ecm9wZG93bkNvbnRleHQuanM/OWYwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbmNvbnN0IERyb3Bkb3duQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xudmFyIF9kZWZhdWx0ID0gRHJvcGRvd25Db250ZXh0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJEcm9wZG93bkNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiX2RlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownItem.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownItem.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.useDropdownItem = useDropdownItem;\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _useEventCallback = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useEventCallback */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useEventCallback.js\"));\nvar _SelectableContext = _interopRequireWildcard(__webpack_require__(/*! ./SelectableContext */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/SelectableContext.js\"));\nvar _NavContext = _interopRequireDefault(__webpack_require__(/*! ./NavContext */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/NavContext.js\"));\nvar _Button = _interopRequireDefault(__webpack_require__(/*! ./Button */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/Button.js\"));\nvar _DataKey = __webpack_require__(/*! ./DataKey */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DataKey.js\");\nvar _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nconst _excluded = [\n    \"eventKey\",\n    \"disabled\",\n    \"onClick\",\n    \"active\",\n    \"as\"\n];\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n/**\n * Create a dropdown item. Returns a set of props for the dropdown item component\n * including an `onClick` handler that prevents selection when the item is disabled\n */ function useDropdownItem({ key, href, active, disabled, onClick }) {\n    const onSelectCtx = (0, React.useContext)(_SelectableContext.default);\n    const navContext = (0, React.useContext)(_NavContext.default);\n    const { activeKey } = navContext || {};\n    const eventKey = (0, _SelectableContext.makeEventKey)(key, href);\n    const isActive = active == null && key != null ? (0, _SelectableContext.makeEventKey)(activeKey) === eventKey : active;\n    const handleClick = (0, _useEventCallback.default)((event)=>{\n        if (disabled) return;\n        onClick == null ? void 0 : onClick(event);\n        if (onSelectCtx && !event.isPropagationStopped()) {\n            onSelectCtx(eventKey, event);\n        }\n    });\n    return [\n        {\n            onClick: handleClick,\n            \"aria-disabled\": disabled || undefined,\n            \"aria-selected\": isActive,\n            [(0, _DataKey.dataAttr)(\"dropdown-item\")]: \"\"\n        },\n        {\n            isActive\n        }\n    ];\n}\nconst DropdownItem = /*#__PURE__*/ React.forwardRef((_ref, ref)=>{\n    let { eventKey, disabled, onClick, active, as: Component = _Button.default } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const [dropdownItemProps] = useDropdownItem({\n        key: eventKey,\n        href: props.href,\n        disabled,\n        onClick,\n        active\n    });\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(Component, Object.assign({}, props, {\n        ref: ref\n    }, dropdownItemProps));\n});\nDropdownItem.displayName = \"DropdownItem\";\nvar _default = DropdownItem;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownItem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownMenu.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownMenu.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.useDropdownMenu = useDropdownMenu;\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _useCallbackRef = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useCallbackRef */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useCallbackRef.js\"));\nvar _DropdownContext = _interopRequireDefault(__webpack_require__(/*! ./DropdownContext */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownContext.js\"));\nvar _usePopper = _interopRequireDefault(__webpack_require__(/*! ./usePopper */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/usePopper.js\"));\nvar _useClickOutside = _interopRequireDefault(__webpack_require__(/*! ./useClickOutside */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/useClickOutside.js\"));\nvar _mergeOptionsWithPopperConfig = _interopRequireDefault(__webpack_require__(/*! ./mergeOptionsWithPopperConfig */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/mergeOptionsWithPopperConfig.js\"));\nvar _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nconst _excluded = [\n    \"children\"\n];\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nconst noop = ()=>{};\n/**\n * @memberOf Dropdown\n * @param {object}  options\n * @param {boolean} options.flip Automatically adjust the menu `drop` position based on viewport edge detection\n * @param {[number, number]} options.offset Define an offset distance between the Menu and the Toggle\n * @param {boolean} options.show Display the menu manually, ignored in the context of a `Dropdown`\n * @param {boolean} options.usePopper opt in/out of using PopperJS to position menus. When disabled you must position it yourself.\n * @param {string}  options.rootCloseEvent The pointer event to listen for when determining \"clicks outside\" the menu for triggering a close.\n * @param {object}  options.popperConfig Options passed to the [`usePopper`](/api/usePopper) hook.\n */ function useDropdownMenu(options = {}) {\n    const context = (0, React.useContext)(_DropdownContext.default);\n    const [arrowElement, attachArrowRef] = (0, _useCallbackRef.default)();\n    const hasShownRef = (0, React.useRef)(false);\n    const { flip, offset, rootCloseEvent, fixed = false, placement: placementOverride, popperConfig = {}, enableEventListeners = true, usePopper: shouldUsePopper = !!context } = options;\n    const show = (context == null ? void 0 : context.show) == null ? !!options.show : context.show;\n    if (show && !hasShownRef.current) {\n        hasShownRef.current = true;\n    }\n    const handleClose = (e)=>{\n        context == null ? void 0 : context.toggle(false, e);\n    };\n    const { placement, setMenu, menuElement, toggleElement } = context || {};\n    const popper = (0, _usePopper.default)(toggleElement, menuElement, (0, _mergeOptionsWithPopperConfig.default)({\n        placement: placementOverride || placement || \"bottom-start\",\n        enabled: shouldUsePopper,\n        enableEvents: enableEventListeners == null ? show : enableEventListeners,\n        offset,\n        flip,\n        fixed,\n        arrowElement,\n        popperConfig\n    }));\n    const menuProps = Object.assign({\n        ref: setMenu || noop,\n        \"aria-labelledby\": toggleElement == null ? void 0 : toggleElement.id\n    }, popper.attributes.popper, {\n        style: popper.styles.popper\n    });\n    const metadata = {\n        show,\n        placement,\n        hasShown: hasShownRef.current,\n        toggle: context == null ? void 0 : context.toggle,\n        popper: shouldUsePopper ? popper : null,\n        arrowProps: shouldUsePopper ? Object.assign({\n            ref: attachArrowRef\n        }, popper.attributes.arrow, {\n            style: popper.styles.arrow\n        }) : {}\n    };\n    (0, _useClickOutside.default)(menuElement, handleClose, {\n        clickTrigger: rootCloseEvent,\n        disabled: !show\n    });\n    return [\n        menuProps,\n        metadata\n    ];\n}\nconst defaultProps = {\n    usePopper: true\n};\n/**\n * Also exported as `<Dropdown.Menu>` from `Dropdown`.\n *\n * @displayName DropdownMenu\n * @memberOf Dropdown\n */ function DropdownMenu(_ref) {\n    let { children } = _ref, options = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const [props, meta] = useDropdownMenu(options);\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {\n        children: children(props, meta)\n    });\n}\nDropdownMenu.displayName = \"DropdownMenu\";\nDropdownMenu.defaultProps = defaultProps;\n/** @component */ var _default = DropdownMenu;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownMenu.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownToggle.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownToggle.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.useDropdownToggle = useDropdownToggle;\nexports[\"default\"] = exports.isRoleMenu = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _ssr = __webpack_require__(/*! ./ssr */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/ssr.js\");\nvar _DropdownContext = _interopRequireDefault(__webpack_require__(/*! ./DropdownContext */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownContext.js\"));\nvar _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nconst isRoleMenu = (el)=>{\n    var _el$getAttribute;\n    return ((_el$getAttribute = el.getAttribute(\"role\")) == null ? void 0 : _el$getAttribute.toLowerCase()) === \"menu\";\n};\nexports.isRoleMenu = isRoleMenu;\nconst noop = ()=>{};\n/**\n * Wires up Dropdown toggle functionality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n *\n * @memberOf Dropdown\n */ function useDropdownToggle() {\n    const id = (0, _ssr.useSSRSafeId)();\n    const { show = false, toggle = noop, setToggle, menuElement } = (0, React.useContext)(_DropdownContext.default) || {};\n    const handleClick = (0, React.useCallback)((e)=>{\n        toggle(!show, e);\n    }, [\n        show,\n        toggle\n    ]);\n    const props = {\n        id,\n        ref: setToggle || noop,\n        onClick: handleClick,\n        \"aria-expanded\": !!show\n    };\n    // This is maybe better down in an effect, but\n    // the component is going to update anyway when the menu element\n    // is set so might return new props.\n    if (menuElement && isRoleMenu(menuElement)) {\n        props[\"aria-haspopup\"] = true;\n    }\n    return [\n        props,\n        {\n            show,\n            toggle\n        }\n    ];\n}\n/**\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\n *\n * @displayName DropdownToggle\n * @memberOf Dropdown\n */ function DropdownToggle({ children }) {\n    const [props, meta] = useDropdownToggle();\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {\n        children: children(props, meta)\n    });\n}\nDropdownToggle.displayName = \"DropdownToggle\";\n/** @component */ var _default = DropdownToggle;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DropdownToggle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/ImperativeTransition.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/ImperativeTransition.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.useTransition = useTransition;\nexports[\"default\"] = ImperativeTransition;\nexports.renderTransition = renderTransition;\nvar _useMergedRefs = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useMergedRefs */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useMergedRefs.js\"));\nvar _useEventCallback = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useEventCallback */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useEventCallback.js\"));\nvar _useIsomorphicEffect = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useIsomorphicEffect */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useIsomorphicEffect.js\"));\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _NoopTransition = _interopRequireDefault(__webpack_require__(/*! ./NoopTransition */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/NoopTransition.js\"));\nvar _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction useTransition({ in: inProp, onTransition }) {\n    const ref = (0, _react.useRef)(null);\n    const isInitialRef = (0, _react.useRef)(true);\n    const handleTransition = (0, _useEventCallback.default)(onTransition);\n    (0, _useIsomorphicEffect.default)(()=>{\n        if (!ref.current) {\n            return undefined;\n        }\n        let stale = false;\n        handleTransition({\n            in: inProp,\n            element: ref.current,\n            initial: isInitialRef.current,\n            isStale: ()=>stale\n        });\n        return ()=>{\n            stale = true;\n        };\n    }, [\n        inProp,\n        handleTransition\n    ]);\n    (0, _useIsomorphicEffect.default)(()=>{\n        isInitialRef.current = false;\n        // this is for strict mode\n        return ()=>{\n            isInitialRef.current = true;\n        };\n    }, []);\n    return ref;\n}\n/**\n * Adapts an imperative transition function to a subset of the RTG `<Transition>` component API.\n *\n * ImperativeTransition does not support mounting options or `appear` at the moment, meaning\n * that it always acts like: `mountOnEnter={true} unmountOnExit={true} appear={true}`\n */ function ImperativeTransition({ children, in: inProp, onExited, onEntered, transition }) {\n    const [exited, setExited] = (0, _react.useState)(!inProp);\n    // TODO: I think this needs to be in an effect\n    if (inProp && exited) {\n        setExited(false);\n    }\n    const ref = useTransition({\n        in: !!inProp,\n        onTransition: (options)=>{\n            const onFinish = ()=>{\n                if (options.isStale()) return;\n                if (options.in) {\n                    onEntered == null ? void 0 : onEntered(options.element, options.initial);\n                } else {\n                    setExited(true);\n                    onExited == null ? void 0 : onExited(options.element);\n                }\n            };\n            Promise.resolve(transition(options)).then(onFinish, (error)=>{\n                if (!options.in) setExited(true);\n                throw error;\n            });\n        }\n    });\n    const combinedRef = (0, _useMergedRefs.default)(ref, children.ref);\n    return exited && !inProp ? null : /*#__PURE__*/ (0, _react.cloneElement)(children, {\n        ref: combinedRef\n    });\n}\nfunction renderTransition(Component, runTransition, props) {\n    if (Component) {\n        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(Component, Object.assign({}, props));\n    }\n    if (runTransition) {\n        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(ImperativeTransition, Object.assign({}, props, {\n            transition: runTransition\n        }));\n    }\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_NoopTransition.default, Object.assign({}, props));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/ImperativeTransition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/Modal.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/Modal.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar _activeElement = _interopRequireDefault(__webpack_require__(/*! dom-helpers/activeElement */ \"(ssr)/./node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/activeElement.js\"));\nvar _contains = _interopRequireDefault(__webpack_require__(/*! dom-helpers/contains */ \"(ssr)/./node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/contains.js\"));\nvar _canUseDOM = _interopRequireDefault(__webpack_require__(/*! dom-helpers/canUseDOM */ \"(ssr)/./node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/canUseDOM.js\"));\nvar _listen = _interopRequireDefault(__webpack_require__(/*! dom-helpers/listen */ \"(ssr)/./node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/listen.js\"));\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\"));\nvar _useMounted = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useMounted */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useMounted.js\"));\nvar _useWillUnmount = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useWillUnmount */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useWillUnmount.js\"));\nvar _usePrevious = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/usePrevious */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/usePrevious.js\"));\nvar _useEventCallback = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useEventCallback */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useEventCallback.js\"));\nvar _ModalManager = _interopRequireDefault(__webpack_require__(/*! ./ModalManager */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/ModalManager.js\"));\nvar _useWaitForDOMRef = _interopRequireDefault(__webpack_require__(/*! ./useWaitForDOMRef */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/useWaitForDOMRef.js\"));\nvar _useWindow = _interopRequireDefault(__webpack_require__(/*! ./useWindow */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/useWindow.js\"));\nvar _ImperativeTransition = __webpack_require__(/*! ./ImperativeTransition */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/ImperativeTransition.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/utils.js\");\nvar _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nconst _excluded = [\n    \"show\",\n    \"role\",\n    \"className\",\n    \"style\",\n    \"children\",\n    \"backdrop\",\n    \"keyboard\",\n    \"onBackdropClick\",\n    \"onEscapeKeyDown\",\n    \"transition\",\n    \"runTransition\",\n    \"backdropTransition\",\n    \"runBackdropTransition\",\n    \"autoFocus\",\n    \"enforceFocus\",\n    \"restoreFocus\",\n    \"restoreFocusOptions\",\n    \"renderDialog\",\n    \"renderBackdrop\",\n    \"manager\",\n    \"container\",\n    \"onShow\",\n    \"onHide\",\n    \"onExit\",\n    \"onExited\",\n    \"onExiting\",\n    \"onEnter\",\n    \"onEntering\",\n    \"onEntered\"\n];\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nlet manager;\nfunction getManager(window) {\n    if (!manager) manager = new _ModalManager.default({\n        ownerDocument: window == null ? void 0 : window.document\n    });\n    return manager;\n}\nfunction useModalManager(provided) {\n    const window = (0, _useWindow.default)();\n    const modalManager = provided || getManager(window);\n    const modal = (0, React.useRef)({\n        dialog: null,\n        backdrop: null\n    });\n    return Object.assign(modal.current, {\n        add: ()=>modalManager.add(modal.current),\n        remove: ()=>modalManager.remove(modal.current),\n        isTopModal: ()=>modalManager.isTopModal(modal.current),\n        setDialogRef: (0, React.useCallback)((ref)=>{\n            modal.current.dialog = ref;\n        }, []),\n        setBackdropRef: (0, React.useCallback)((ref)=>{\n            modal.current.backdrop = ref;\n        }, [])\n    });\n}\nconst Modal = /*#__PURE__*/ (0, React.forwardRef)((_ref, ref)=>{\n    let { show = false, role = \"dialog\", className, style, children, backdrop = true, keyboard = true, onBackdropClick, onEscapeKeyDown, transition, runTransition, backdropTransition, runBackdropTransition, autoFocus = true, enforceFocus = true, restoreFocus = true, restoreFocusOptions, renderDialog, renderBackdrop = (props)=>/*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", Object.assign({}, props)), manager: providedManager, container: containerRef, onShow, onHide = ()=>{}, onExit, onExited, onExiting, onEnter, onEntering, onEntered } = _ref, rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const ownerWindow = (0, _useWindow.default)();\n    const container = (0, _useWaitForDOMRef.default)(containerRef);\n    const modal = useModalManager(providedManager);\n    const isMounted = (0, _useMounted.default)();\n    const prevShow = (0, _usePrevious.default)(show);\n    const [exited, setExited] = (0, React.useState)(!show);\n    const lastFocusRef = (0, React.useRef)(null);\n    (0, React.useImperativeHandle)(ref, ()=>modal, [\n        modal\n    ]);\n    if (_canUseDOM.default && !prevShow && show) {\n        lastFocusRef.current = (0, _activeElement.default)(ownerWindow == null ? void 0 : ownerWindow.document);\n    }\n    // TODO: I think this needs to be in an effect\n    if (show && exited) {\n        setExited(false);\n    }\n    const handleShow = (0, _useEventCallback.default)(()=>{\n        modal.add();\n        removeKeydownListenerRef.current = (0, _listen.default)(document, \"keydown\", handleDocumentKeyDown);\n        removeFocusListenerRef.current = (0, _listen.default)(document, \"focus\", // the timeout is necessary b/c this will run before the new modal is mounted\n        // and so steals focus from it\n        ()=>setTimeout(handleEnforceFocus), true);\n        if (onShow) {\n            onShow();\n        }\n        // autofocus after onShow to not trigger a focus event for previous\n        // modals before this one is shown.\n        if (autoFocus) {\n            var _modal$dialog$ownerDo, _modal$dialog;\n            const currentActiveElement = (0, _activeElement.default)((_modal$dialog$ownerDo = (_modal$dialog = modal.dialog) == null ? void 0 : _modal$dialog.ownerDocument) != null ? _modal$dialog$ownerDo : ownerWindow == null ? void 0 : ownerWindow.document);\n            if (modal.dialog && currentActiveElement && !(0, _contains.default)(modal.dialog, currentActiveElement)) {\n                lastFocusRef.current = currentActiveElement;\n                modal.dialog.focus();\n            }\n        }\n    });\n    const handleHide = (0, _useEventCallback.default)(()=>{\n        modal.remove();\n        removeKeydownListenerRef.current == null ? void 0 : removeKeydownListenerRef.current();\n        removeFocusListenerRef.current == null ? void 0 : removeFocusListenerRef.current();\n        if (restoreFocus) {\n            var _lastFocusRef$current;\n            // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)\n            (_lastFocusRef$current = lastFocusRef.current) == null ? void 0 : _lastFocusRef$current.focus == null ? void 0 : _lastFocusRef$current.focus(restoreFocusOptions);\n            lastFocusRef.current = null;\n        }\n    });\n    // TODO: try and combine these effects: https://github.com/react-bootstrap/react-overlays/pull/794#discussion_r409954120\n    // Show logic when:\n    //  - show is `true` _and_ `container` has resolved\n    (0, React.useEffect)(()=>{\n        if (!show || !container) return;\n        handleShow();\n    }, [\n        show,\n        container,\n        /* should never change: */ handleShow\n    ]);\n    // Hide cleanup logic when:\n    //  - `exited` switches to true\n    //  - component unmounts;\n    (0, React.useEffect)(()=>{\n        if (!exited) return;\n        handleHide();\n    }, [\n        exited,\n        handleHide\n    ]);\n    (0, _useWillUnmount.default)(()=>{\n        handleHide();\n    });\n    // --------------------------------\n    const handleEnforceFocus = (0, _useEventCallback.default)(()=>{\n        if (!enforceFocus || !isMounted() || !modal.isTopModal()) {\n            return;\n        }\n        const currentActiveElement = (0, _activeElement.default)(ownerWindow == null ? void 0 : ownerWindow.document);\n        if (modal.dialog && currentActiveElement && !(0, _contains.default)(modal.dialog, currentActiveElement)) {\n            modal.dialog.focus();\n        }\n    });\n    const handleBackdropClick = (0, _useEventCallback.default)((e)=>{\n        if (e.target !== e.currentTarget) {\n            return;\n        }\n        onBackdropClick == null ? void 0 : onBackdropClick(e);\n        if (backdrop === true) {\n            onHide();\n        }\n    });\n    const handleDocumentKeyDown = (0, _useEventCallback.default)((e)=>{\n        if (keyboard && (0, _utils.isEscKey)(e) && modal.isTopModal()) {\n            onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(e);\n            if (!e.defaultPrevented) {\n                onHide();\n            }\n        }\n    });\n    const removeFocusListenerRef = (0, React.useRef)();\n    const removeKeydownListenerRef = (0, React.useRef)();\n    const handleHidden = (...args)=>{\n        setExited(true);\n        onExited == null ? void 0 : onExited(...args);\n    };\n    if (!container) {\n        return null;\n    }\n    const dialogProps = Object.assign({\n        role,\n        ref: modal.setDialogRef,\n        // apparently only works on the dialog role element\n        \"aria-modal\": role === \"dialog\" ? true : undefined\n    }, rest, {\n        style,\n        className,\n        tabIndex: -1\n    });\n    let dialog = renderDialog ? renderDialog(dialogProps) : /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", Object.assign({}, dialogProps, {\n        children: /*#__PURE__*/ React.cloneElement(children, {\n            role: \"document\"\n        })\n    }));\n    dialog = (0, _ImperativeTransition.renderTransition)(transition, runTransition, {\n        unmountOnExit: true,\n        mountOnEnter: true,\n        appear: true,\n        in: !!show,\n        onExit,\n        onExiting,\n        onExited: handleHidden,\n        onEnter,\n        onEntering,\n        onEntered,\n        children: dialog\n    });\n    let backdropElement = null;\n    if (backdrop) {\n        backdropElement = renderBackdrop({\n            ref: modal.setBackdropRef,\n            onClick: handleBackdropClick\n        });\n        backdropElement = (0, _ImperativeTransition.renderTransition)(backdropTransition, runBackdropTransition, {\n            in: !!show,\n            appear: true,\n            mountOnEnter: true,\n            unmountOnExit: true,\n            children: backdropElement\n        });\n    }\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {\n        children: /*#__PURE__*/ _reactDom.default.createPortal(/*#__PURE__*/ (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {\n            children: [\n                backdropElement,\n                dialog\n            ]\n        }), container)\n    });\n});\nModal.displayName = \"Modal\";\nvar _default = Object.assign(Modal, {\n    Manager: _ModalManager.default\n});\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/Modal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/ModalManager.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/ModalManager.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = exports.OPEN_DATA_ATTRIBUTE = void 0;\nvar _css = _interopRequireDefault(__webpack_require__(/*! dom-helpers/css */ \"(ssr)/./node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/css.js\"));\nvar _DataKey = __webpack_require__(/*! ./DataKey */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/DataKey.js\");\nvar _getScrollbarWidth = _interopRequireDefault(__webpack_require__(/*! ./getScrollbarWidth */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/getScrollbarWidth.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst OPEN_DATA_ATTRIBUTE = (0, _DataKey.dataAttr)(\"modal-open\");\n/**\n * Manages a stack of Modals as well as ensuring\n * body scrolling is is disabled and padding accounted for\n */ exports.OPEN_DATA_ATTRIBUTE = OPEN_DATA_ATTRIBUTE;\nclass ModalManager {\n    constructor({ ownerDocument, handleContainerOverflow = true, isRTL = false } = {}){\n        this.handleContainerOverflow = handleContainerOverflow;\n        this.isRTL = isRTL;\n        this.modals = [];\n        this.ownerDocument = ownerDocument;\n    }\n    getScrollbarWidth() {\n        return (0, _getScrollbarWidth.default)(this.ownerDocument);\n    }\n    getElement() {\n        return (this.ownerDocument || document).body;\n    }\n    setModalAttributes(_modal) {\n    // For overriding\n    }\n    removeModalAttributes(_modal) {\n    // For overriding\n    }\n    setContainerStyle(containerState) {\n        const style = {\n            overflow: \"hidden\"\n        };\n        // we are only interested in the actual `style` here\n        // because we will override it\n        const paddingProp = this.isRTL ? \"paddingLeft\" : \"paddingRight\";\n        const container = this.getElement();\n        containerState.style = {\n            overflow: container.style.overflow,\n            [paddingProp]: container.style[paddingProp]\n        };\n        if (containerState.scrollBarWidth) {\n            // use computed style, here to get the real padding\n            // to add our scrollbar width\n            style[paddingProp] = `${parseInt((0, _css.default)(container, paddingProp) || \"0\", 10) + containerState.scrollBarWidth}px`;\n        }\n        container.setAttribute(OPEN_DATA_ATTRIBUTE, \"\");\n        (0, _css.default)(container, style);\n    }\n    reset() {\n        [\n            ...this.modals\n        ].forEach((m)=>this.remove(m));\n    }\n    removeContainerStyle(containerState) {\n        const container = this.getElement();\n        container.removeAttribute(OPEN_DATA_ATTRIBUTE);\n        Object.assign(container.style, containerState.style);\n    }\n    add(modal) {\n        let modalIdx = this.modals.indexOf(modal);\n        if (modalIdx !== -1) {\n            return modalIdx;\n        }\n        modalIdx = this.modals.length;\n        this.modals.push(modal);\n        this.setModalAttributes(modal);\n        if (modalIdx !== 0) {\n            return modalIdx;\n        }\n        this.state = {\n            scrollBarWidth: this.getScrollbarWidth(),\n            style: {}\n        };\n        if (this.handleContainerOverflow) {\n            this.setContainerStyle(this.state);\n        }\n        return modalIdx;\n    }\n    remove(modal) {\n        const modalIdx = this.modals.indexOf(modal);\n        if (modalIdx === -1) {\n            return;\n        }\n        this.modals.splice(modalIdx, 1);\n        // if that was the last modal in a container,\n        // clean up the container\n        if (!this.modals.length && this.handleContainerOverflow) {\n            this.removeContainerStyle(this.state);\n        }\n        this.removeModalAttributes(modal);\n    }\n    isTopModal(modal) {\n        return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n    }\n}\nvar _default = ModalManager;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/ModalManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/NavContext.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/NavContext.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nconst NavContext = /*#__PURE__*/ React.createContext(null);\nNavContext.displayName = \"NavContext\";\nvar _default = NavContext;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy9OYXZDb250ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLGtCQUFrQixHQUFHO0FBQ3JCQSxrQkFBZSxHQUFHLEtBQUs7QUFDdkIsSUFBSUcsUUFBUUMsd0JBQXdCQyxtQkFBT0EsQ0FBQyxxS0FBTztBQUNuRCxTQUFTQyx5QkFBeUJDLFdBQVc7SUFBSSxJQUFJLE9BQU9DLFlBQVksWUFBWSxPQUFPO0lBQU0sSUFBSUMsb0JBQW9CLElBQUlEO0lBQVcsSUFBSUUsbUJBQW1CLElBQUlGO0lBQVcsT0FBTyxDQUFDRiwyQkFBMkIsU0FBVUMsV0FBVztRQUFJLE9BQU9BLGNBQWNHLG1CQUFtQkQ7SUFBbUIsR0FBR0Y7QUFBYztBQUN0VCxTQUFTSCx3QkFBd0JPLEdBQUcsRUFBRUosV0FBVztJQUFJLElBQUksQ0FBQ0EsZUFBZUksT0FBT0EsSUFBSVYsVUFBVSxFQUFFO1FBQUUsT0FBT1U7SUFBSztJQUFFLElBQUlBLFFBQVEsUUFBUSxPQUFPQSxRQUFRLFlBQVksT0FBT0EsUUFBUSxZQUFZO1FBQUUsT0FBTztZQUFFVCxTQUFTUztRQUFJO0lBQUc7SUFBRSxJQUFJQyxRQUFRTix5QkFBeUJDO0lBQWMsSUFBSUssU0FBU0EsTUFBTUMsR0FBRyxDQUFDRixNQUFNO1FBQUUsT0FBT0MsTUFBTUUsR0FBRyxDQUFDSDtJQUFNO0lBQUUsSUFBSUksU0FBUyxDQUFDO0lBQUcsSUFBSUMsd0JBQXdCQyxPQUFPQyxjQUFjLElBQUlELE9BQU9FLHdCQUF3QjtJQUFFLElBQUssSUFBSUMsT0FBT1QsSUFBSztRQUFFLElBQUlTLFFBQVEsYUFBYUgsT0FBT0ksU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1osS0FBS1MsTUFBTTtZQUFFLElBQUlJLE9BQU9SLHdCQUF3QkMsT0FBT0Usd0JBQXdCLENBQUNSLEtBQUtTLE9BQU87WUFBTSxJQUFJSSxRQUFTQSxDQUFBQSxLQUFLVixHQUFHLElBQUlVLEtBQUtDLEdBQUcsR0FBRztnQkFBRVIsT0FBT0MsY0FBYyxDQUFDSCxRQUFRSyxLQUFLSTtZQUFPLE9BQU87Z0JBQUVULE1BQU0sQ0FBQ0ssSUFBSSxHQUFHVCxHQUFHLENBQUNTLElBQUk7WUFBRTtRQUFFO0lBQUU7SUFBRUwsT0FBT2IsT0FBTyxHQUFHUztJQUFLLElBQUlDLE9BQU87UUFBRUEsTUFBTWEsR0FBRyxDQUFDZCxLQUFLSTtJQUFTO0lBQUUsT0FBT0E7QUFBUTtBQUNueUIsTUFBTVcsYUFBYSxXQUFXLEdBQUV2QixNQUFNd0IsYUFBYSxDQUFDO0FBQ3BERCxXQUFXRSxXQUFXLEdBQUc7QUFDekIsSUFBSUMsV0FBV0g7QUFDZjFCLGtCQUFlLEdBQUc2QiIsInNvdXJjZXMiOlsid2VicGFjazovL29tMzY1Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0ByZXN0YXJ0K3VpQDEuNi42X3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9AcmVzdGFydC91aS9janMvTmF2Q29udGV4dC5qcz9iMGJmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuY29uc3QgTmF2Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuTmF2Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdOYXZDb250ZXh0JztcbnZhciBfZGVmYXVsdCA9IE5hdkNvbnRleHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwibmFtZXMiOlsiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIk5hdkNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiZGlzcGxheU5hbWUiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/NavContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/NoopTransition.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/NoopTransition.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar _useEventCallback = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useEventCallback */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useEventCallback.js\"));\nvar _useMergedRefs = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useMergedRefs */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useMergedRefs.js\"));\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction NoopTransition({ children, in: inProp, onExited, mountOnEnter, unmountOnExit }) {\n    const ref = (0, _react.useRef)(null);\n    const hasEnteredRef = (0, _react.useRef)(inProp);\n    const handleExited = (0, _useEventCallback.default)(onExited);\n    (0, _react.useEffect)(()=>{\n        if (inProp) hasEnteredRef.current = true;\n        else {\n            handleExited(ref.current);\n        }\n    }, [\n        inProp,\n        handleExited\n    ]);\n    const combinedRef = (0, _useMergedRefs.default)(ref, children.ref);\n    const child = /*#__PURE__*/ (0, _react.cloneElement)(children, {\n        ref: combinedRef\n    });\n    if (inProp) return child;\n    if (unmountOnExit) {\n        return null;\n    }\n    if (!hasEnteredRef.current && mountOnEnter) {\n        return null;\n    }\n    return child;\n}\nvar _default = NoopTransition;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy9Ob29wVHJhbnNpdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSxrQkFBa0IsR0FBRztBQUNyQkEsa0JBQWUsR0FBRyxLQUFLO0FBQ3ZCLElBQUlHLG9CQUFvQkMsdUJBQXVCQyxtQkFBT0EsQ0FBQywwSkFBaUM7QUFDeEYsSUFBSUMsaUJBQWlCRix1QkFBdUJDLG1CQUFPQSxDQUFDLG9KQUE4QjtBQUNsRixJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQyxxS0FBTztBQUM1QixTQUFTRCx1QkFBdUJJLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJUCxVQUFVLEdBQUdPLE1BQU07UUFBRU4sU0FBU007SUFBSTtBQUFHO0FBQzlGLFNBQVNDLGVBQWUsRUFDdEJDLFFBQVEsRUFDUkMsSUFBSUMsTUFBTSxFQUNWQyxRQUFRLEVBQ1JDLFlBQVksRUFDWkMsYUFBYSxFQUNkO0lBQ0MsTUFBTUMsTUFBTSxDQUFDLEdBQUdULE9BQU9VLE1BQU0sRUFBRTtJQUMvQixNQUFNQyxnQkFBZ0IsQ0FBQyxHQUFHWCxPQUFPVSxNQUFNLEVBQUVMO0lBQ3pDLE1BQU1PLGVBQWUsQ0FBQyxHQUFHaEIsa0JBQWtCRCxPQUFPLEVBQUVXO0lBQ25ELElBQUdOLE9BQU9hLFNBQVMsRUFBRTtRQUNwQixJQUFJUixRQUFRTSxjQUFjRyxPQUFPLEdBQUc7YUFBVTtZQUM1Q0YsYUFBYUgsSUFBSUssT0FBTztRQUMxQjtJQUNGLEdBQUc7UUFBQ1Q7UUFBUU87S0FBYTtJQUN6QixNQUFNRyxjQUFjLENBQUMsR0FBR2hCLGVBQWVKLE9BQU8sRUFBRWMsS0FBS04sU0FBU00sR0FBRztJQUNqRSxNQUFNTyxRQUFxQixXQUFGLEdBQUcsSUFBR2hCLE9BQU9pQixZQUFZLEVBQUVkLFVBQVU7UUFDNURNLEtBQUtNO0lBQ1A7SUFDQSxJQUFJVixRQUFRLE9BQU9XO0lBQ25CLElBQUlSLGVBQWU7UUFDakIsT0FBTztJQUNUO0lBQ0EsSUFBSSxDQUFDRyxjQUFjRyxPQUFPLElBQUlQLGNBQWM7UUFDMUMsT0FBTztJQUNUO0lBQ0EsT0FBT1M7QUFDVDtBQUNBLElBQUlFLFdBQVdoQjtBQUNmVCxrQkFBZSxHQUFHeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbTM2NS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcmVzdGFydCt1aUAxLjYuNl9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvQHJlc3RhcnQvdWkvY2pzL05vb3BUcmFuc2l0aW9uLmpzPzgwNDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX3VzZUV2ZW50Q2FsbGJhY2sgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAcmVzdGFydC9ob29rcy91c2VFdmVudENhbGxiYWNrXCIpKTtcbnZhciBfdXNlTWVyZ2VkUmVmcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkByZXN0YXJ0L2hvb2tzL3VzZU1lcmdlZFJlZnNcIikpO1xudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBOb29wVHJhbnNpdGlvbih7XG4gIGNoaWxkcmVuLFxuICBpbjogaW5Qcm9wLFxuICBvbkV4aXRlZCxcbiAgbW91bnRPbkVudGVyLFxuICB1bm1vdW50T25FeGl0XG59KSB7XG4gIGNvbnN0IHJlZiA9ICgwLCBfcmVhY3QudXNlUmVmKShudWxsKTtcbiAgY29uc3QgaGFzRW50ZXJlZFJlZiA9ICgwLCBfcmVhY3QudXNlUmVmKShpblByb3ApO1xuICBjb25zdCBoYW5kbGVFeGl0ZWQgPSAoMCwgX3VzZUV2ZW50Q2FsbGJhY2suZGVmYXVsdCkob25FeGl0ZWQpO1xuICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoKCkgPT4ge1xuICAgIGlmIChpblByb3ApIGhhc0VudGVyZWRSZWYuY3VycmVudCA9IHRydWU7ZWxzZSB7XG4gICAgICBoYW5kbGVFeGl0ZWQocmVmLmN1cnJlbnQpO1xuICAgIH1cbiAgfSwgW2luUHJvcCwgaGFuZGxlRXhpdGVkXSk7XG4gIGNvbnN0IGNvbWJpbmVkUmVmID0gKDAsIF91c2VNZXJnZWRSZWZzLmRlZmF1bHQpKHJlZiwgY2hpbGRyZW4ucmVmKTtcbiAgY29uc3QgY2hpbGQgPSAvKiNfX1BVUkVfXyovKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkcmVuLCB7XG4gICAgcmVmOiBjb21iaW5lZFJlZlxuICB9KTtcbiAgaWYgKGluUHJvcCkgcmV0dXJuIGNoaWxkO1xuICBpZiAodW5tb3VudE9uRXhpdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICghaGFzRW50ZXJlZFJlZi5jdXJyZW50ICYmIG1vdW50T25FbnRlcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjaGlsZDtcbn1cbnZhciBfZGVmYXVsdCA9IE5vb3BUcmFuc2l0aW9uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl91c2VFdmVudENhbGxiYWNrIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdXNlTWVyZ2VkUmVmcyIsIl9yZWFjdCIsIm9iaiIsIk5vb3BUcmFuc2l0aW9uIiwiY2hpbGRyZW4iLCJpbiIsImluUHJvcCIsIm9uRXhpdGVkIiwibW91bnRPbkVudGVyIiwidW5tb3VudE9uRXhpdCIsInJlZiIsInVzZVJlZiIsImhhc0VudGVyZWRSZWYiLCJoYW5kbGVFeGl0ZWQiLCJ1c2VFZmZlY3QiLCJjdXJyZW50IiwiY29tYmluZWRSZWYiLCJjaGlsZCIsImNsb25lRWxlbWVudCIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/NoopTransition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/SelectableContext.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/SelectableContext.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = exports.makeEventKey = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nconst SelectableContext = /*#__PURE__*/ React.createContext(null);\nconst makeEventKey = (eventKey, href = null)=>{\n    if (eventKey != null) return String(eventKey);\n    return href || null;\n};\nexports.makeEventKey = makeEventKey;\nvar _default = SelectableContext;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy9TZWxlY3RhYmxlQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSxrQkFBa0IsR0FBRztBQUNyQkEsa0JBQWUsR0FBR0Esb0JBQW9CLEdBQUcsS0FBSztBQUM5QyxJQUFJSSxRQUFRQyx3QkFBd0JDLG1CQUFPQSxDQUFDLHFLQUFPO0FBQ25ELFNBQVNDLHlCQUF5QkMsV0FBVztJQUFJLElBQUksT0FBT0MsWUFBWSxZQUFZLE9BQU87SUFBTSxJQUFJQyxvQkFBb0IsSUFBSUQ7SUFBVyxJQUFJRSxtQkFBbUIsSUFBSUY7SUFBVyxPQUFPLENBQUNGLDJCQUEyQixTQUFVQyxXQUFXO1FBQUksT0FBT0EsY0FBY0csbUJBQW1CRDtJQUFtQixHQUFHRjtBQUFjO0FBQ3RULFNBQVNILHdCQUF3Qk8sR0FBRyxFQUFFSixXQUFXO0lBQUksSUFBSSxDQUFDQSxlQUFlSSxPQUFPQSxJQUFJWCxVQUFVLEVBQUU7UUFBRSxPQUFPVztJQUFLO0lBQUUsSUFBSUEsUUFBUSxRQUFRLE9BQU9BLFFBQVEsWUFBWSxPQUFPQSxRQUFRLFlBQVk7UUFBRSxPQUFPO1lBQUVWLFNBQVNVO1FBQUk7SUFBRztJQUFFLElBQUlDLFFBQVFOLHlCQUF5QkM7SUFBYyxJQUFJSyxTQUFTQSxNQUFNQyxHQUFHLENBQUNGLE1BQU07UUFBRSxPQUFPQyxNQUFNRSxHQUFHLENBQUNIO0lBQU07SUFBRSxJQUFJSSxTQUFTLENBQUM7SUFBRyxJQUFJQyx3QkFBd0JDLE9BQU9DLGNBQWMsSUFBSUQsT0FBT0Usd0JBQXdCO0lBQUUsSUFBSyxJQUFJQyxPQUFPVCxJQUFLO1FBQUUsSUFBSVMsUUFBUSxhQUFhSCxPQUFPSSxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDWixLQUFLUyxNQUFNO1lBQUUsSUFBSUksT0FBT1Isd0JBQXdCQyxPQUFPRSx3QkFBd0IsQ0FBQ1IsS0FBS1MsT0FBTztZQUFNLElBQUlJLFFBQVNBLENBQUFBLEtBQUtWLEdBQUcsSUFBSVUsS0FBS0MsR0FBRyxHQUFHO2dCQUFFUixPQUFPQyxjQUFjLENBQUNILFFBQVFLLEtBQUtJO1lBQU8sT0FBTztnQkFBRVQsTUFBTSxDQUFDSyxJQUFJLEdBQUdULEdBQUcsQ0FBQ1MsSUFBSTtZQUFFO1FBQUU7SUFBRTtJQUFFTCxPQUFPZCxPQUFPLEdBQUdVO0lBQUssSUFBSUMsT0FBTztRQUFFQSxNQUFNYSxHQUFHLENBQUNkLEtBQUtJO0lBQVM7SUFBRSxPQUFPQTtBQUFRO0FBQ255QixNQUFNVyxvQkFBb0IsV0FBVyxHQUFFdkIsTUFBTXdCLGFBQWEsQ0FBQztBQUMzRCxNQUFNekIsZUFBZSxDQUFDMEIsVUFBVUMsT0FBTyxJQUFJO0lBQ3pDLElBQUlELFlBQVksTUFBTSxPQUFPRSxPQUFPRjtJQUNwQyxPQUFPQyxRQUFRO0FBQ2pCO0FBQ0E5QixvQkFBb0IsR0FBR0c7QUFDdkIsSUFBSTZCLFdBQVdMO0FBQ2YzQixrQkFBZSxHQUFHZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbTM2NS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcmVzdGFydCt1aUAxLjYuNl9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvQHJlc3RhcnQvdWkvY2pzL1NlbGVjdGFibGVDb250ZXh0LmpzP2U5ZTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLm1ha2VFdmVudEtleSA9IHZvaWQgMDtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbmNvbnN0IFNlbGVjdGFibGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5jb25zdCBtYWtlRXZlbnRLZXkgPSAoZXZlbnRLZXksIGhyZWYgPSBudWxsKSA9PiB7XG4gIGlmIChldmVudEtleSAhPSBudWxsKSByZXR1cm4gU3RyaW5nKGV2ZW50S2V5KTtcbiAgcmV0dXJuIGhyZWYgfHwgbnVsbDtcbn07XG5leHBvcnRzLm1ha2VFdmVudEtleSA9IG1ha2VFdmVudEtleTtcbnZhciBfZGVmYXVsdCA9IFNlbGVjdGFibGVDb250ZXh0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm1ha2VFdmVudEtleSIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJTZWxlY3RhYmxlQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJldmVudEtleSIsImhyZWYiLCJTdHJpbmciLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/SelectableContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/getScrollbarWidth.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/getScrollbarWidth.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = getBodyScrollbarWidth;\n/**\n * Get the width of the vertical window scrollbar if it's visible\n */ function getBodyScrollbarWidth(ownerDocument = document) {\n    const window = ownerDocument.defaultView;\n    return Math.abs(window.innerWidth - ownerDocument.documentElement.clientWidth);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy9nZXRTY3JvbGxiYXJXaWR0aC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSxrQkFBa0IsR0FBRztBQUNyQkEsa0JBQWUsR0FBR0c7QUFDbEI7O0NBRUMsR0FDRCxTQUFTQSxzQkFBc0JDLGdCQUFnQkMsUUFBUTtJQUNyRCxNQUFNQyxTQUFTRixjQUFjRyxXQUFXO0lBQ3hDLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQ0gsT0FBT0ksVUFBVSxHQUFHTixjQUFjTyxlQUFlLENBQUNDLFdBQVc7QUFDL0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbTM2NS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcmVzdGFydCt1aUAxLjYuNl9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvQHJlc3RhcnQvdWkvY2pzL2dldFNjcm9sbGJhcldpZHRoLmpzP2UyMmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRCb2R5U2Nyb2xsYmFyV2lkdGg7XG4vKipcbiAqIEdldCB0aGUgd2lkdGggb2YgdGhlIHZlcnRpY2FsIHdpbmRvdyBzY3JvbGxiYXIgaWYgaXQncyB2aXNpYmxlXG4gKi9cbmZ1bmN0aW9uIGdldEJvZHlTY3JvbGxiYXJXaWR0aChvd25lckRvY3VtZW50ID0gZG9jdW1lbnQpIHtcbiAgY29uc3Qgd2luZG93ID0gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgcmV0dXJuIE1hdGguYWJzKHdpbmRvdy5pbm5lcldpZHRoIC0gb3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpO1xufSJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJnZXRCb2R5U2Nyb2xsYmFyV2lkdGgiLCJvd25lckRvY3VtZW50IiwiZG9jdW1lbnQiLCJ3aW5kb3ciLCJkZWZhdWx0VmlldyIsIk1hdGgiLCJhYnMiLCJpbm5lcldpZHRoIiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/getScrollbarWidth.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/mergeOptionsWithPopperConfig.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/mergeOptionsWithPopperConfig.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nexports.__esModule = true;\nexports.toModifierMap = toModifierMap;\nexports.toModifierArray = toModifierArray;\nexports[\"default\"] = mergeOptionsWithPopperConfig;\nfunction toModifierMap(modifiers) {\n    const result = {};\n    if (!Array.isArray(modifiers)) {\n        return modifiers || result;\n    }\n    // eslint-disable-next-line no-unused-expressions\n    modifiers == null ? void 0 : modifiers.forEach((m)=>{\n        result[m.name] = m;\n    });\n    return result;\n}\nfunction toModifierArray(map = {}) {\n    if (Array.isArray(map)) return map;\n    return Object.keys(map).map((k)=>{\n        map[k].name = k;\n        return map[k];\n    });\n}\nfunction mergeOptionsWithPopperConfig({ enabled, enableEvents, placement, flip, offset, fixed, containerPadding, arrowElement, popperConfig = {} }) {\n    var _modifiers$eventListe, _modifiers$preventOve, _modifiers$preventOve2, _modifiers$offset, _modifiers$arrow;\n    const modifiers = toModifierMap(popperConfig.modifiers);\n    return Object.assign({}, popperConfig, {\n        placement,\n        enabled,\n        strategy: fixed ? \"fixed\" : popperConfig.strategy,\n        modifiers: toModifierArray(Object.assign({}, modifiers, {\n            eventListeners: {\n                enabled: enableEvents,\n                options: (_modifiers$eventListe = modifiers.eventListeners) == null ? void 0 : _modifiers$eventListe.options\n            },\n            preventOverflow: Object.assign({}, modifiers.preventOverflow, {\n                options: containerPadding ? Object.assign({\n                    padding: containerPadding\n                }, (_modifiers$preventOve = modifiers.preventOverflow) == null ? void 0 : _modifiers$preventOve.options) : (_modifiers$preventOve2 = modifiers.preventOverflow) == null ? void 0 : _modifiers$preventOve2.options\n            }),\n            offset: {\n                options: Object.assign({\n                    offset\n                }, (_modifiers$offset = modifiers.offset) == null ? void 0 : _modifiers$offset.options)\n            },\n            arrow: Object.assign({}, modifiers.arrow, {\n                enabled: !!arrowElement,\n                options: Object.assign({}, (_modifiers$arrow = modifiers.arrow) == null ? void 0 : _modifiers$arrow.options, {\n                    element: arrowElement\n                })\n            }),\n            flip: Object.assign({\n                enabled: !!flip\n            }, modifiers.flip)\n        }))\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy9tZXJnZU9wdGlvbnNXaXRoUG9wcGVyQ29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLGtCQUFrQixHQUFHO0FBQ3JCQSxxQkFBcUIsR0FBR0U7QUFDeEJGLHVCQUF1QixHQUFHRztBQUMxQkgsa0JBQWUsR0FBR0s7QUFDbEIsU0FBU0gsY0FBY0ksU0FBUztJQUM5QixNQUFNQyxTQUFTLENBQUM7SUFDaEIsSUFBSSxDQUFDQyxNQUFNQyxPQUFPLENBQUNILFlBQVk7UUFDN0IsT0FBT0EsYUFBYUM7SUFDdEI7SUFFQSxpREFBaUQ7SUFDakRELGFBQWEsT0FBTyxLQUFLLElBQUlBLFVBQVVJLE9BQU8sQ0FBQ0MsQ0FBQUE7UUFDN0NKLE1BQU0sQ0FBQ0ksRUFBRUMsSUFBSSxDQUFDLEdBQUdEO0lBQ25CO0lBQ0EsT0FBT0o7QUFDVDtBQUNBLFNBQVNKLGdCQUFnQlUsTUFBTSxDQUFDLENBQUM7SUFDL0IsSUFBSUwsTUFBTUMsT0FBTyxDQUFDSSxNQUFNLE9BQU9BO0lBQy9CLE9BQU9DLE9BQU9DLElBQUksQ0FBQ0YsS0FBS0EsR0FBRyxDQUFDRyxDQUFBQTtRQUMxQkgsR0FBRyxDQUFDRyxFQUFFLENBQUNKLElBQUksR0FBR0k7UUFDZCxPQUFPSCxHQUFHLENBQUNHLEVBQUU7SUFDZjtBQUNGO0FBQ0EsU0FBU1gsNkJBQTZCLEVBQ3BDWSxPQUFPLEVBQ1BDLFlBQVksRUFDWkMsU0FBUyxFQUNUQyxJQUFJLEVBQ0pDLE1BQU0sRUFDTkMsS0FBSyxFQUNMQyxnQkFBZ0IsRUFDaEJDLFlBQVksRUFDWkMsZUFBZSxDQUFDLENBQUMsRUFDbEI7SUFDQyxJQUFJQyx1QkFBdUJDLHVCQUF1QkMsd0JBQXdCQyxtQkFBbUJDO0lBQzdGLE1BQU14QixZQUFZSixjQUFjdUIsYUFBYW5CLFNBQVM7SUFDdEQsT0FBT1EsT0FBT2lCLE1BQU0sQ0FBQyxDQUFDLEdBQUdOLGNBQWM7UUFDckNOO1FBQ0FGO1FBQ0FlLFVBQVVWLFFBQVEsVUFBVUcsYUFBYU8sUUFBUTtRQUNqRDFCLFdBQVdILGdCQUFnQlcsT0FBT2lCLE1BQU0sQ0FBQyxDQUFDLEdBQUd6QixXQUFXO1lBQ3REMkIsZ0JBQWdCO2dCQUNkaEIsU0FBU0M7Z0JBQ1RnQixTQUFTLENBQUNSLHdCQUF3QnBCLFVBQVUyQixjQUFjLEtBQUssT0FBTyxLQUFLLElBQUlQLHNCQUFzQlEsT0FBTztZQUM5RztZQUNBQyxpQkFBaUJyQixPQUFPaUIsTUFBTSxDQUFDLENBQUMsR0FBR3pCLFVBQVU2QixlQUFlLEVBQUU7Z0JBQzVERCxTQUFTWCxtQkFBbUJULE9BQU9pQixNQUFNLENBQUM7b0JBQ3hDSyxTQUFTYjtnQkFDWCxHQUFHLENBQUNJLHdCQUF3QnJCLFVBQVU2QixlQUFlLEtBQUssT0FBTyxLQUFLLElBQUlSLHNCQUFzQk8sT0FBTyxJQUFJLENBQUNOLHlCQUF5QnRCLFVBQVU2QixlQUFlLEtBQUssT0FBTyxLQUFLLElBQUlQLHVCQUF1Qk0sT0FBTztZQUNuTjtZQUNBYixRQUFRO2dCQUNOYSxTQUFTcEIsT0FBT2lCLE1BQU0sQ0FBQztvQkFDckJWO2dCQUNGLEdBQUcsQ0FBQ1Esb0JBQW9CdkIsVUFBVWUsTUFBTSxLQUFLLE9BQU8sS0FBSyxJQUFJUSxrQkFBa0JLLE9BQU87WUFDeEY7WUFDQUcsT0FBT3ZCLE9BQU9pQixNQUFNLENBQUMsQ0FBQyxHQUFHekIsVUFBVStCLEtBQUssRUFBRTtnQkFDeENwQixTQUFTLENBQUMsQ0FBQ087Z0JBQ1hVLFNBQVNwQixPQUFPaUIsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDRCxtQkFBbUJ4QixVQUFVK0IsS0FBSyxLQUFLLE9BQU8sS0FBSyxJQUFJUCxpQkFBaUJJLE9BQU8sRUFBRTtvQkFDM0dJLFNBQVNkO2dCQUNYO1lBQ0Y7WUFDQUosTUFBTU4sT0FBT2lCLE1BQU0sQ0FBQztnQkFDbEJkLFNBQVMsQ0FBQyxDQUFDRztZQUNiLEdBQUdkLFVBQVVjLElBQUk7UUFDbkI7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb20zNjUvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy9tZXJnZU9wdGlvbnNXaXRoUG9wcGVyQ29uZmlnLmpzPzdiODUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLnRvTW9kaWZpZXJNYXAgPSB0b01vZGlmaWVyTWFwO1xuZXhwb3J0cy50b01vZGlmaWVyQXJyYXkgPSB0b01vZGlmaWVyQXJyYXk7XG5leHBvcnRzLmRlZmF1bHQgPSBtZXJnZU9wdGlvbnNXaXRoUG9wcGVyQ29uZmlnO1xuZnVuY3Rpb24gdG9Nb2RpZmllck1hcChtb2RpZmllcnMpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGlmICghQXJyYXkuaXNBcnJheShtb2RpZmllcnMpKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVycyB8fCByZXN1bHQ7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gIG1vZGlmaWVycyA9PSBudWxsID8gdm9pZCAwIDogbW9kaWZpZXJzLmZvckVhY2gobSA9PiB7XG4gICAgcmVzdWx0W20ubmFtZV0gPSBtO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHRvTW9kaWZpZXJBcnJheShtYXAgPSB7fSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShtYXApKSByZXR1cm4gbWFwO1xuICByZXR1cm4gT2JqZWN0LmtleXMobWFwKS5tYXAoayA9PiB7XG4gICAgbWFwW2tdLm5hbWUgPSBrO1xuICAgIHJldHVybiBtYXBba107XG4gIH0pO1xufVxuZnVuY3Rpb24gbWVyZ2VPcHRpb25zV2l0aFBvcHBlckNvbmZpZyh7XG4gIGVuYWJsZWQsXG4gIGVuYWJsZUV2ZW50cyxcbiAgcGxhY2VtZW50LFxuICBmbGlwLFxuICBvZmZzZXQsXG4gIGZpeGVkLFxuICBjb250YWluZXJQYWRkaW5nLFxuICBhcnJvd0VsZW1lbnQsXG4gIHBvcHBlckNvbmZpZyA9IHt9XG59KSB7XG4gIHZhciBfbW9kaWZpZXJzJGV2ZW50TGlzdGUsIF9tb2RpZmllcnMkcHJldmVudE92ZSwgX21vZGlmaWVycyRwcmV2ZW50T3ZlMiwgX21vZGlmaWVycyRvZmZzZXQsIF9tb2RpZmllcnMkYXJyb3c7XG4gIGNvbnN0IG1vZGlmaWVycyA9IHRvTW9kaWZpZXJNYXAocG9wcGVyQ29uZmlnLm1vZGlmaWVycyk7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwb3BwZXJDb25maWcsIHtcbiAgICBwbGFjZW1lbnQsXG4gICAgZW5hYmxlZCxcbiAgICBzdHJhdGVneTogZml4ZWQgPyAnZml4ZWQnIDogcG9wcGVyQ29uZmlnLnN0cmF0ZWd5LFxuICAgIG1vZGlmaWVyczogdG9Nb2RpZmllckFycmF5KE9iamVjdC5hc3NpZ24oe30sIG1vZGlmaWVycywge1xuICAgICAgZXZlbnRMaXN0ZW5lcnM6IHtcbiAgICAgICAgZW5hYmxlZDogZW5hYmxlRXZlbnRzLFxuICAgICAgICBvcHRpb25zOiAoX21vZGlmaWVycyRldmVudExpc3RlID0gbW9kaWZpZXJzLmV2ZW50TGlzdGVuZXJzKSA9PSBudWxsID8gdm9pZCAwIDogX21vZGlmaWVycyRldmVudExpc3RlLm9wdGlvbnNcbiAgICAgIH0sXG4gICAgICBwcmV2ZW50T3ZlcmZsb3c6IE9iamVjdC5hc3NpZ24oe30sIG1vZGlmaWVycy5wcmV2ZW50T3ZlcmZsb3csIHtcbiAgICAgICAgb3B0aW9uczogY29udGFpbmVyUGFkZGluZyA/IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgIHBhZGRpbmc6IGNvbnRhaW5lclBhZGRpbmdcbiAgICAgICAgfSwgKF9tb2RpZmllcnMkcHJldmVudE92ZSA9IG1vZGlmaWVycy5wcmV2ZW50T3ZlcmZsb3cpID09IG51bGwgPyB2b2lkIDAgOiBfbW9kaWZpZXJzJHByZXZlbnRPdmUub3B0aW9ucykgOiAoX21vZGlmaWVycyRwcmV2ZW50T3ZlMiA9IG1vZGlmaWVycy5wcmV2ZW50T3ZlcmZsb3cpID09IG51bGwgPyB2b2lkIDAgOiBfbW9kaWZpZXJzJHByZXZlbnRPdmUyLm9wdGlvbnNcbiAgICAgIH0pLFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgIG9mZnNldFxuICAgICAgICB9LCAoX21vZGlmaWVycyRvZmZzZXQgPSBtb2RpZmllcnMub2Zmc2V0KSA9PSBudWxsID8gdm9pZCAwIDogX21vZGlmaWVycyRvZmZzZXQub3B0aW9ucylcbiAgICAgIH0sXG4gICAgICBhcnJvdzogT2JqZWN0LmFzc2lnbih7fSwgbW9kaWZpZXJzLmFycm93LCB7XG4gICAgICAgIGVuYWJsZWQ6ICEhYXJyb3dFbGVtZW50LFxuICAgICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCAoX21vZGlmaWVycyRhcnJvdyA9IG1vZGlmaWVycy5hcnJvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF9tb2RpZmllcnMkYXJyb3cub3B0aW9ucywge1xuICAgICAgICAgIGVsZW1lbnQ6IGFycm93RWxlbWVudFxuICAgICAgICB9KVxuICAgICAgfSksXG4gICAgICBmbGlwOiBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgZW5hYmxlZDogISFmbGlwXG4gICAgICB9LCBtb2RpZmllcnMuZmxpcClcbiAgICB9KSlcbiAgfSk7XG59Il0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwidG9Nb2RpZmllck1hcCIsInRvTW9kaWZpZXJBcnJheSIsImRlZmF1bHQiLCJtZXJnZU9wdGlvbnNXaXRoUG9wcGVyQ29uZmlnIiwibW9kaWZpZXJzIiwicmVzdWx0IiwiQXJyYXkiLCJpc0FycmF5IiwiZm9yRWFjaCIsIm0iLCJuYW1lIiwibWFwIiwiT2JqZWN0Iiwia2V5cyIsImsiLCJlbmFibGVkIiwiZW5hYmxlRXZlbnRzIiwicGxhY2VtZW50IiwiZmxpcCIsIm9mZnNldCIsImZpeGVkIiwiY29udGFpbmVyUGFkZGluZyIsImFycm93RWxlbWVudCIsInBvcHBlckNvbmZpZyIsIl9tb2RpZmllcnMkZXZlbnRMaXN0ZSIsIl9tb2RpZmllcnMkcHJldmVudE92ZSIsIl9tb2RpZmllcnMkcHJldmVudE92ZTIiLCJfbW9kaWZpZXJzJG9mZnNldCIsIl9tb2RpZmllcnMkYXJyb3ciLCJhc3NpZ24iLCJzdHJhdGVneSIsImV2ZW50TGlzdGVuZXJzIiwib3B0aW9ucyIsInByZXZlbnRPdmVyZmxvdyIsInBhZGRpbmciLCJhcnJvdyIsImVsZW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/mergeOptionsWithPopperConfig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/popper.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/popper.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar top = \"top\";\nvar bottom = \"bottom\";\nvar right = \"right\";\nvar left = \"left\";\nvar auto = \"auto\";\nvar basePlacements = [\n    top,\n    bottom,\n    right,\n    left\n];\nvar start = \"start\";\nvar end = \"end\";\nvar clippingParents = \"clippingParents\";\nvar viewport = \"viewport\";\nvar popper = \"popper\";\nvar reference = \"reference\";\nvar variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {\n    return acc.concat([\n        placement + \"-\" + start,\n        placement + \"-\" + end\n    ]);\n}, []);\nvar placements = /*#__PURE__*/ [].concat(basePlacements, [\n    auto\n]).reduce(function(acc, placement) {\n    return acc.concat([\n        placement,\n        placement + \"-\" + start,\n        placement + \"-\" + end\n    ]);\n}, []); // modifiers that need to read the DOM\nvar beforeRead = \"beforeRead\";\nvar read = \"read\";\nvar afterRead = \"afterRead\"; // pure-logic modifiers\nvar beforeMain = \"beforeMain\";\nvar main = \"main\";\nvar afterMain = \"afterMain\"; // modifier with the purpose to write to the DOM (or write into a framework state)\nvar beforeWrite = \"beforeWrite\";\nvar write = \"write\";\nvar afterWrite = \"afterWrite\";\nvar modifierPhases = [\n    beforeRead,\n    read,\n    afterRead,\n    beforeMain,\n    main,\n    afterMain,\n    beforeWrite,\n    write,\n    afterWrite\n];\nfunction getBasePlacement(placement) {\n    return placement.split(\"-\")[0];\n}\nfunction getWindow(node) {\n    if (node == null) {\n        return window;\n    }\n    if (node.toString() !== \"[object Window]\") {\n        var ownerDocument = node.ownerDocument;\n        return ownerDocument ? ownerDocument.defaultView || window : window;\n    }\n    return node;\n}\nfunction isElement(node) {\n    var OwnElement = getWindow(node).Element;\n    return node instanceof OwnElement || node instanceof Element;\n}\nfunction isHTMLElement(node) {\n    var OwnElement = getWindow(node).HTMLElement;\n    return node instanceof OwnElement || node instanceof HTMLElement;\n}\nfunction isShadowRoot(node) {\n    // IE 11 has no ShadowRoot\n    if (typeof ShadowRoot === \"undefined\") {\n        return false;\n    }\n    var OwnElement = getWindow(node).ShadowRoot;\n    return node instanceof OwnElement || node instanceof ShadowRoot;\n}\nvar max = Math.max;\nvar min = Math.min;\nvar round = Math.round;\nfunction getUAString() {\n    var uaData = navigator.userAgentData;\n    if (uaData != null && uaData.brands) {\n        return uaData.brands.map(function(item) {\n            return item.brand + \"/\" + item.version;\n        }).join(\" \");\n    }\n    return navigator.userAgent;\n}\nfunction isLayoutViewport() {\n    return !/^((?!chrome|android).)*safari/i.test(getUAString());\n}\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy) {\n    if (includeScale === void 0) {\n        includeScale = false;\n    }\n    if (isFixedStrategy === void 0) {\n        isFixedStrategy = false;\n    }\n    var clientRect = element.getBoundingClientRect();\n    var scaleX = 1;\n    var scaleY = 1;\n    if (includeScale && isHTMLElement(element)) {\n        scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;\n        scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;\n    }\n    var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;\n    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;\n    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;\n    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;\n    var width = clientRect.width / scaleX;\n    var height = clientRect.height / scaleY;\n    return {\n        width: width,\n        height: height,\n        top: y,\n        right: x + width,\n        bottom: y + height,\n        left: x,\n        x: x,\n        y: y\n    };\n}\n// means it doesn't take into account transforms.\nfunction getLayoutRect(element) {\n    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.\n    // Fixes https://github.com/popperjs/popper-core/issues/1223\n    var width = element.offsetWidth;\n    var height = element.offsetHeight;\n    if (Math.abs(clientRect.width - width) <= 1) {\n        width = clientRect.width;\n    }\n    if (Math.abs(clientRect.height - height) <= 1) {\n        height = clientRect.height;\n    }\n    return {\n        x: element.offsetLeft,\n        y: element.offsetTop,\n        width: width,\n        height: height\n    };\n}\nfunction contains(parent, child) {\n    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n    if (parent.contains(child)) {\n        return true;\n    } else if (rootNode && isShadowRoot(rootNode)) {\n        var next = child;\n        do {\n            if (next && parent.isSameNode(next)) {\n                return true;\n            } // $FlowFixMe[prop-missing]: need a better way to handle this...\n            next = next.parentNode || next.host;\n        }while (next);\n    } // Give up, the result is false\n    return false;\n}\nfunction getNodeName(element) {\n    return element ? (element.nodeName || \"\").toLowerCase() : null;\n}\nfunction getComputedStyle(element) {\n    return getWindow(element).getComputedStyle(element);\n}\nfunction isTableElement(element) {\n    return [\n        \"table\",\n        \"td\",\n        \"th\"\n    ].indexOf(getNodeName(element)) >= 0;\n}\nfunction getDocumentElement(element) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;\n}\nfunction getParentNode(element) {\n    if (getNodeName(element) === \"html\") {\n        return element;\n    }\n    return(// $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element.parentNode || (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    getDocumentElement(element) // fallback\n    );\n}\nfunction getTrueOffsetParent(element) {\n    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n    getComputedStyle(element).position === \"fixed\") {\n        return null;\n    }\n    return element.offsetParent;\n} // `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\nfunction getContainingBlock(element) {\n    var isFirefox = /firefox/i.test(getUAString());\n    var isIE = /Trident/i.test(getUAString());\n    if (isIE && isHTMLElement(element)) {\n        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n        var elementCss = getComputedStyle(element);\n        if (elementCss.position === \"fixed\") {\n            return null;\n        }\n    }\n    var currentNode = getParentNode(element);\n    if (isShadowRoot(currentNode)) {\n        currentNode = currentNode.host;\n    }\n    while(isHTMLElement(currentNode) && [\n        \"html\",\n        \"body\"\n    ].indexOf(getNodeName(currentNode)) < 0){\n        var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n        // create a containing block.\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n        if (css.transform !== \"none\" || css.perspective !== \"none\" || css.contain === \"paint\" || [\n            \"transform\",\n            \"perspective\"\n        ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === \"filter\" || isFirefox && css.filter && css.filter !== \"none\") {\n            return currentNode;\n        } else {\n            currentNode = currentNode.parentNode;\n        }\n    }\n    return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element) {\n    var window1 = getWindow(element);\n    var offsetParent = getTrueOffsetParent(element);\n    while(offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === \"static\"){\n        offsetParent = getTrueOffsetParent(offsetParent);\n    }\n    if (offsetParent && (getNodeName(offsetParent) === \"html\" || getNodeName(offsetParent) === \"body\" && getComputedStyle(offsetParent).position === \"static\")) {\n        return window1;\n    }\n    return offsetParent || getContainingBlock(element) || window1;\n}\nfunction getMainAxisFromPlacement(placement) {\n    return [\n        \"top\",\n        \"bottom\"\n    ].indexOf(placement) >= 0 ? \"x\" : \"y\";\n}\nfunction within(min$1, value, max$1) {\n    return max(min$1, min(value, max$1));\n}\nfunction withinMaxClamp(min, value, max) {\n    var v = within(min, value, max);\n    return v > max ? max : v;\n}\nfunction getFreshSideObject() {\n    return {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n    };\n}\nfunction mergePaddingObject(paddingObject) {\n    return Object.assign({}, getFreshSideObject(), paddingObject);\n}\nfunction expandToHashMap(value, keys) {\n    return keys.reduce(function(hashMap, key) {\n        hashMap[key] = value;\n        return hashMap;\n    }, {});\n}\nvar toPaddingObject = function toPaddingObject(padding, state) {\n    padding = typeof padding === \"function\" ? padding(Object.assign({}, state.rects, {\n        placement: state.placement\n    })) : padding;\n    return mergePaddingObject(typeof padding !== \"number\" ? padding : expandToHashMap(padding, basePlacements));\n};\nfunction arrow(_ref) {\n    var _state$modifiersData$;\n    var state = _ref.state, name = _ref.name, options = _ref.options;\n    var arrowElement = state.elements.arrow;\n    var popperOffsets = state.modifiersData.popperOffsets;\n    var basePlacement = getBasePlacement(state.placement);\n    var axis = getMainAxisFromPlacement(basePlacement);\n    var isVertical = [\n        left,\n        right\n    ].indexOf(basePlacement) >= 0;\n    var len = isVertical ? \"height\" : \"width\";\n    if (!arrowElement || !popperOffsets) {\n        return;\n    }\n    var paddingObject = toPaddingObject(options.padding, state);\n    var arrowRect = getLayoutRect(arrowElement);\n    var minProp = axis === \"y\" ? top : left;\n    var maxProp = axis === \"y\" ? bottom : right;\n    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n    var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n    var arrowOffsetParent = getOffsetParent(arrowElement);\n    var clientSize = arrowOffsetParent ? axis === \"y\" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n    // outside of the popper bounds\n    var min = paddingObject[minProp];\n    var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n    var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n    var axisProp = axis;\n    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n}\nfunction effect$1(_ref2) {\n    var state = _ref2.state, options = _ref2.options;\n    var _options$element = options.element, arrowElement = _options$element === void 0 ? \"[data-popper-arrow]\" : _options$element;\n    if (arrowElement == null) {\n        return;\n    } // CSS selector\n    if (typeof arrowElement === \"string\") {\n        arrowElement = state.elements.popper.querySelector(arrowElement);\n        if (!arrowElement) {\n            return;\n        }\n    }\n    if (true) {\n        if (!isHTMLElement(arrowElement)) {\n            console.error([\n                'Popper: \"arrow\" element must be an HTMLElement (not an SVGElement).',\n                \"To use an SVG arrow, wrap it in an HTMLElement that will be used as\",\n                \"the arrow.\"\n            ].join(\" \"));\n        }\n    }\n    if (!contains(state.elements.popper, arrowElement)) {\n        if (true) {\n            console.error([\n                'Popper: \"arrow\" modifier\\'s `element` must be a child of the popper',\n                \"element.\"\n            ].join(\" \"));\n        }\n        return;\n    }\n    state.elements.arrow = arrowElement;\n} // eslint-disable-next-line import/no-unused-modules\nvar arrow$1 = {\n    name: \"arrow\",\n    enabled: true,\n    phase: \"main\",\n    fn: arrow,\n    effect: effect$1,\n    requires: [\n        \"popperOffsets\"\n    ],\n    requiresIfExists: [\n        \"preventOverflow\"\n    ]\n};\nfunction getVariation(placement) {\n    return placement.split(\"-\")[1];\n}\nvar unsetSides = {\n    top: \"auto\",\n    right: \"auto\",\n    bottom: \"auto\",\n    left: \"auto\"\n}; // Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\nfunction roundOffsetsByDPR(_ref) {\n    var x = _ref.x, y = _ref.y;\n    var win = window;\n    var dpr = win.devicePixelRatio || 1;\n    return {\n        x: round(x * dpr) / dpr || 0,\n        y: round(y * dpr) / dpr || 0\n    };\n}\nfunction mapToStyles(_ref2) {\n    var _Object$assign2;\n    var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;\n    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;\n    var _ref3 = typeof roundOffsets === \"function\" ? roundOffsets({\n        x: x,\n        y: y\n    }) : {\n        x: x,\n        y: y\n    };\n    x = _ref3.x;\n    y = _ref3.y;\n    var hasX = offsets.hasOwnProperty(\"x\");\n    var hasY = offsets.hasOwnProperty(\"y\");\n    var sideX = left;\n    var sideY = top;\n    var win = window;\n    if (adaptive) {\n        var offsetParent = getOffsetParent(popper);\n        var heightProp = \"clientHeight\";\n        var widthProp = \"clientWidth\";\n        if (offsetParent === getWindow(popper)) {\n            offsetParent = getDocumentElement(popper);\n            if (getComputedStyle(offsetParent).position !== \"static\" && position === \"absolute\") {\n                heightProp = \"scrollHeight\";\n                widthProp = \"scrollWidth\";\n            }\n        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n        offsetParent = offsetParent;\n        if (placement === top || (placement === left || placement === right) && variation === end) {\n            sideY = bottom;\n            var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];\n            y -= offsetY - popperRect.height;\n            y *= gpuAcceleration ? 1 : -1;\n        }\n        if (placement === left || (placement === top || placement === bottom) && variation === end) {\n            sideX = right;\n            var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];\n            x -= offsetX - popperRect.width;\n            x *= gpuAcceleration ? 1 : -1;\n        }\n    }\n    var commonStyles = Object.assign({\n        position: position\n    }, adaptive && unsetSides);\n    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({\n        x: x,\n        y: y\n    }) : {\n        x: x,\n        y: y\n    };\n    x = _ref4.x;\n    y = _ref4.y;\n    if (gpuAcceleration) {\n        var _Object$assign;\n        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? \"0\" : \"\", _Object$assign[sideX] = hasX ? \"0\" : \"\", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n    }\n    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : \"\", _Object$assign2[sideX] = hasX ? x + \"px\" : \"\", _Object$assign2.transform = \"\", _Object$assign2));\n}\nfunction computeStyles(_ref5) {\n    var state = _ref5.state, options = _ref5.options;\n    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n    if (true) {\n        var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || \"\";\n        if (adaptive && [\n            \"transform\",\n            \"top\",\n            \"right\",\n            \"bottom\",\n            \"left\"\n        ].some(function(property) {\n            return transitionProperty.indexOf(property) >= 0;\n        })) {\n            console.warn([\n                \"Popper: Detected CSS transitions on at least one of the following\",\n                'CSS properties: \"transform\", \"top\", \"right\", \"bottom\", \"left\".',\n                \"\\n\\n\",\n                'Disable the \"computeStyles\" modifier\\'s `adaptive` option to allow',\n                \"for smooth transitions, or remove these properties from the CSS\",\n                \"transition declaration on the popper element if only transitioning\",\n                \"opacity or background-color for example.\",\n                \"\\n\\n\",\n                \"We recommend using the popper element as a wrapper around an inner\",\n                \"element that can have any CSS property transitioned for animations.\"\n            ].join(\" \"));\n        }\n    }\n    var commonStyles = {\n        placement: getBasePlacement(state.placement),\n        variation: getVariation(state.placement),\n        popper: state.elements.popper,\n        popperRect: state.rects.popper,\n        gpuAcceleration: gpuAcceleration,\n        isFixed: state.options.strategy === \"fixed\"\n    };\n    if (state.modifiersData.popperOffsets != null) {\n        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n            offsets: state.modifiersData.popperOffsets,\n            position: state.options.strategy,\n            adaptive: adaptive,\n            roundOffsets: roundOffsets\n        })));\n    }\n    if (state.modifiersData.arrow != null) {\n        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n            offsets: state.modifiersData.arrow,\n            position: \"absolute\",\n            adaptive: false,\n            roundOffsets: roundOffsets\n        })));\n    }\n    state.attributes.popper = Object.assign({}, state.attributes.popper, {\n        \"data-popper-placement\": state.placement\n    });\n} // eslint-disable-next-line import/no-unused-modules\nvar computeStyles$1 = {\n    name: \"computeStyles\",\n    enabled: true,\n    phase: \"beforeWrite\",\n    fn: computeStyles,\n    data: {}\n};\nvar passive = {\n    passive: true\n};\nfunction effect(_ref) {\n    var state = _ref.state, instance = _ref.instance, options = _ref.options;\n    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;\n    var window1 = getWindow(state.elements.popper);\n    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n    if (scroll) {\n        scrollParents.forEach(function(scrollParent) {\n            scrollParent.addEventListener(\"scroll\", instance.update, passive);\n        });\n    }\n    if (resize) {\n        window1.addEventListener(\"resize\", instance.update, passive);\n    }\n    return function() {\n        if (scroll) {\n            scrollParents.forEach(function(scrollParent) {\n                scrollParent.removeEventListener(\"scroll\", instance.update, passive);\n            });\n        }\n        if (resize) {\n            window1.removeEventListener(\"resize\", instance.update, passive);\n        }\n    };\n} // eslint-disable-next-line import/no-unused-modules\nvar eventListeners = {\n    name: \"eventListeners\",\n    enabled: true,\n    phase: \"write\",\n    fn: function fn() {},\n    effect: effect,\n    data: {}\n};\nvar hash$1 = {\n    left: \"right\",\n    right: \"left\",\n    bottom: \"top\",\n    top: \"bottom\"\n};\nfunction getOppositePlacement(placement) {\n    return placement.replace(/left|right|bottom|top/g, function(matched) {\n        return hash$1[matched];\n    });\n}\nvar hash = {\n    start: \"end\",\n    end: \"start\"\n};\nfunction getOppositeVariationPlacement(placement) {\n    return placement.replace(/start|end/g, function(matched) {\n        return hash[matched];\n    });\n}\nfunction getWindowScroll(node) {\n    var win = getWindow(node);\n    var scrollLeft = win.pageXOffset;\n    var scrollTop = win.pageYOffset;\n    return {\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n    };\n}\nfunction getWindowScrollBarX(element) {\n    // If <html> has a CSS width greater than the viewport, then this will be\n    // incorrect for RTL.\n    // Popper 1 is broken in this case and never had a bug report so let's assume\n    // it's not an issue. I don't think anyone ever specifies width on <html>\n    // anyway.\n    // Browsers where the left scrollbar doesn't cause an issue report `0` for\n    // this (e.g. Edge 2019, IE11, Safari)\n    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n}\nfunction getViewportRect(element, strategy) {\n    var win = getWindow(element);\n    var html = getDocumentElement(element);\n    var visualViewport = win.visualViewport;\n    var width = html.clientWidth;\n    var height = html.clientHeight;\n    var x = 0;\n    var y = 0;\n    if (visualViewport) {\n        width = visualViewport.width;\n        height = visualViewport.height;\n        var layoutViewport = isLayoutViewport();\n        if (layoutViewport || !layoutViewport && strategy === \"fixed\") {\n            x = visualViewport.offsetLeft;\n            y = visualViewport.offsetTop;\n        }\n    }\n    return {\n        width: width,\n        height: height,\n        x: x + getWindowScrollBarX(element),\n        y: y\n    };\n}\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\nfunction getDocumentRect(element) {\n    var _element$ownerDocumen;\n    var html = getDocumentElement(element);\n    var winScroll = getWindowScroll(element);\n    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n    var y = -winScroll.scrollTop;\n    if (getComputedStyle(body || html).direction === \"rtl\") {\n        x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n    }\n    return {\n        width: width,\n        height: height,\n        x: x,\n        y: y\n    };\n}\nfunction isScrollParent(element) {\n    // Firefox wants us to check `-x` and `-y` variations as well\n    var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;\n    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}\nfunction getScrollParent(node) {\n    if ([\n        \"html\",\n        \"body\",\n        \"#document\"\n    ].indexOf(getNodeName(node)) >= 0) {\n        // $FlowFixMe[incompatible-return]: assume body is always available\n        return node.ownerDocument.body;\n    }\n    if (isHTMLElement(node) && isScrollParent(node)) {\n        return node;\n    }\n    return getScrollParent(getParentNode(node));\n}\n/*\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\nuntil we get to the top window object. This list is what we attach scroll listeners\nto, because if any of these parent elements scroll, we'll need to re-calculate the\nreference element's position.\n*/ function listScrollParents(element, list) {\n    var _element$ownerDocumen;\n    if (list === void 0) {\n        list = [];\n    }\n    var scrollParent = getScrollParent(element);\n    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n    var win = getWindow(scrollParent);\n    var target = isBody ? [\n        win\n    ].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n    var updatedList = list.concat(target);\n    return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));\n}\nfunction rectToClientRect(rect) {\n    return Object.assign({}, rect, {\n        left: rect.x,\n        top: rect.y,\n        right: rect.x + rect.width,\n        bottom: rect.y + rect.height\n    });\n}\nfunction getInnerBoundingClientRect(element, strategy) {\n    var rect = getBoundingClientRect(element, false, strategy === \"fixed\");\n    rect.top = rect.top + element.clientTop;\n    rect.left = rect.left + element.clientLeft;\n    rect.bottom = rect.top + element.clientHeight;\n    rect.right = rect.left + element.clientWidth;\n    rect.width = element.clientWidth;\n    rect.height = element.clientHeight;\n    rect.x = rect.left;\n    rect.y = rect.top;\n    return rect;\n}\nfunction getClientRectFromMixedType(element, clippingParent, strategy) {\n    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n} // A \"clipping parent\" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\nfunction getClippingParents(element) {\n    var clippingParents = listScrollParents(getParentNode(element));\n    var canEscapeClipping = [\n        \"absolute\",\n        \"fixed\"\n    ].indexOf(getComputedStyle(element).position) >= 0;\n    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n    if (!isElement(clipperElement)) {\n        return [];\n    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n    return clippingParents.filter(function(clippingParent) {\n        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== \"body\";\n    });\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\nfunction getClippingRect(element, boundary, rootBoundary, strategy) {\n    var mainClippingParents = boundary === \"clippingParents\" ? getClippingParents(element) : [].concat(boundary);\n    var clippingParents = [].concat(mainClippingParents, [\n        rootBoundary\n    ]);\n    var firstClippingParent = clippingParents[0];\n    var clippingRect = clippingParents.reduce(function(accRect, clippingParent) {\n        var rect = getClientRectFromMixedType(element, clippingParent, strategy);\n        accRect.top = max(rect.top, accRect.top);\n        accRect.right = min(rect.right, accRect.right);\n        accRect.bottom = min(rect.bottom, accRect.bottom);\n        accRect.left = max(rect.left, accRect.left);\n        return accRect;\n    }, getClientRectFromMixedType(element, firstClippingParent, strategy));\n    clippingRect.width = clippingRect.right - clippingRect.left;\n    clippingRect.height = clippingRect.bottom - clippingRect.top;\n    clippingRect.x = clippingRect.left;\n    clippingRect.y = clippingRect.top;\n    return clippingRect;\n}\nfunction computeOffsets(_ref) {\n    var reference = _ref.reference, element = _ref.element, placement = _ref.placement;\n    var basePlacement = placement ? getBasePlacement(placement) : null;\n    var variation = placement ? getVariation(placement) : null;\n    var commonX = reference.x + reference.width / 2 - element.width / 2;\n    var commonY = reference.y + reference.height / 2 - element.height / 2;\n    var offsets;\n    switch(basePlacement){\n        case top:\n            offsets = {\n                x: commonX,\n                y: reference.y - element.height\n            };\n            break;\n        case bottom:\n            offsets = {\n                x: commonX,\n                y: reference.y + reference.height\n            };\n            break;\n        case right:\n            offsets = {\n                x: reference.x + reference.width,\n                y: commonY\n            };\n            break;\n        case left:\n            offsets = {\n                x: reference.x - element.width,\n                y: commonY\n            };\n            break;\n        default:\n            offsets = {\n                x: reference.x,\n                y: reference.y\n            };\n    }\n    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n    if (mainAxis != null) {\n        var len = mainAxis === \"y\" ? \"height\" : \"width\";\n        switch(variation){\n            case start:\n                offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n                break;\n            case end:\n                offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n                break;\n        }\n    }\n    return offsets;\n}\nfunction detectOverflow(state, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;\n    var paddingObject = mergePaddingObject(typeof padding !== \"number\" ? padding : expandToHashMap(padding, basePlacements));\n    var altContext = elementContext === popper ? reference : popper;\n    var popperRect = state.rects.popper;\n    var element = state.elements[altBoundary ? altContext : elementContext];\n    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);\n    var referenceClientRect = getBoundingClientRect(state.elements.reference);\n    var popperOffsets = computeOffsets({\n        reference: referenceClientRect,\n        element: popperRect,\n        strategy: \"absolute\",\n        placement: placement\n    });\n    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n    // 0 or negative = within the clipping rect\n    var overflowOffsets = {\n        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n        right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n    };\n    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n    if (elementContext === popper && offsetData) {\n        var offset = offsetData[placement];\n        Object.keys(overflowOffsets).forEach(function(key) {\n            var multiply = [\n                right,\n                bottom\n            ].indexOf(key) >= 0 ? 1 : -1;\n            var axis = [\n                top,\n                bottom\n            ].indexOf(key) >= 0 ? \"y\" : \"x\";\n            overflowOffsets[key] += offset[axis] * multiply;\n        });\n    }\n    return overflowOffsets;\n}\nfunction computeAutoPlacement(state, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;\n    var variation = getVariation(placement);\n    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement) {\n        return getVariation(placement) === variation;\n    }) : basePlacements;\n    var allowedPlacements = placements$1.filter(function(placement) {\n        return allowedAutoPlacements.indexOf(placement) >= 0;\n    });\n    if (allowedPlacements.length === 0) {\n        allowedPlacements = placements$1;\n        if (true) {\n            console.error([\n                \"Popper: The `allowedAutoPlacements` option did not allow any\",\n                \"placements. Ensure the `placement` option matches the variation\",\n                \"of the allowed placements.\",\n                'For example, \"auto\" cannot be used to allow \"bottom-start\".',\n                'Use \"auto-start\" instead.'\n            ].join(\" \"));\n        }\n    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n    var overflows = allowedPlacements.reduce(function(acc, placement) {\n        acc[placement] = detectOverflow(state, {\n            placement: placement,\n            boundary: boundary,\n            rootBoundary: rootBoundary,\n            padding: padding\n        })[getBasePlacement(placement)];\n        return acc;\n    }, {});\n    return Object.keys(overflows).sort(function(a, b) {\n        return overflows[a] - overflows[b];\n    });\n}\nfunction getExpandedFallbackPlacements(placement) {\n    if (getBasePlacement(placement) === auto) {\n        return [];\n    }\n    var oppositePlacement = getOppositePlacement(placement);\n    return [\n        getOppositeVariationPlacement(placement),\n        oppositePlacement,\n        getOppositeVariationPlacement(oppositePlacement)\n    ];\n}\nfunction flip(_ref) {\n    var state = _ref.state, options = _ref.options, name = _ref.name;\n    if (state.modifiersData[name]._skip) {\n        return;\n    }\n    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;\n    var preferredPlacement = state.options.placement;\n    var basePlacement = getBasePlacement(preferredPlacement);\n    var isBasePlacement = basePlacement === preferredPlacement;\n    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [\n        getOppositePlacement(preferredPlacement)\n    ] : getExpandedFallbackPlacements(preferredPlacement));\n    var placements = [\n        preferredPlacement\n    ].concat(fallbackPlacements).reduce(function(acc, placement) {\n        return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n            placement: placement,\n            boundary: boundary,\n            rootBoundary: rootBoundary,\n            padding: padding,\n            flipVariations: flipVariations,\n            allowedAutoPlacements: allowedAutoPlacements\n        }) : placement);\n    }, []);\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var checksMap = new Map();\n    var makeFallbackChecks = true;\n    var firstFittingPlacement = placements[0];\n    for(var i = 0; i < placements.length; i++){\n        var placement = placements[i];\n        var _basePlacement = getBasePlacement(placement);\n        var isStartVariation = getVariation(placement) === start;\n        var isVertical = [\n            top,\n            bottom\n        ].indexOf(_basePlacement) >= 0;\n        var len = isVertical ? \"width\" : \"height\";\n        var overflow = detectOverflow(state, {\n            placement: placement,\n            boundary: boundary,\n            rootBoundary: rootBoundary,\n            altBoundary: altBoundary,\n            padding: padding\n        });\n        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n        if (referenceRect[len] > popperRect[len]) {\n            mainVariationSide = getOppositePlacement(mainVariationSide);\n        }\n        var altVariationSide = getOppositePlacement(mainVariationSide);\n        var checks = [];\n        if (checkMainAxis) {\n            checks.push(overflow[_basePlacement] <= 0);\n        }\n        if (checkAltAxis) {\n            checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n        }\n        if (checks.every(function(check) {\n            return check;\n        })) {\n            firstFittingPlacement = placement;\n            makeFallbackChecks = false;\n            break;\n        }\n        checksMap.set(placement, checks);\n    }\n    if (makeFallbackChecks) {\n        // `2` may be desired in some cases – research later\n        var numberOfChecks = flipVariations ? 3 : 1;\n        var _loop = function _loop(_i) {\n            var fittingPlacement = placements.find(function(placement) {\n                var checks = checksMap.get(placement);\n                if (checks) {\n                    return checks.slice(0, _i).every(function(check) {\n                        return check;\n                    });\n                }\n            });\n            if (fittingPlacement) {\n                firstFittingPlacement = fittingPlacement;\n                return \"break\";\n            }\n        };\n        for(var _i = numberOfChecks; _i > 0; _i--){\n            var _ret = _loop(_i);\n            if (_ret === \"break\") break;\n        }\n    }\n    if (state.placement !== firstFittingPlacement) {\n        state.modifiersData[name]._skip = true;\n        state.placement = firstFittingPlacement;\n        state.reset = true;\n    }\n} // eslint-disable-next-line import/no-unused-modules\nvar flip$1 = {\n    name: \"flip\",\n    enabled: true,\n    phase: \"main\",\n    fn: flip,\n    requiresIfExists: [\n        \"offset\"\n    ],\n    data: {\n        _skip: false\n    }\n};\nfunction getSideOffsets(overflow, rect, preventedOffsets) {\n    if (preventedOffsets === void 0) {\n        preventedOffsets = {\n            x: 0,\n            y: 0\n        };\n    }\n    return {\n        top: overflow.top - rect.height - preventedOffsets.y,\n        right: overflow.right - rect.width + preventedOffsets.x,\n        bottom: overflow.bottom - rect.height + preventedOffsets.y,\n        left: overflow.left - rect.width - preventedOffsets.x\n    };\n}\nfunction isAnySideFullyClipped(overflow) {\n    return [\n        top,\n        right,\n        bottom,\n        left\n    ].some(function(side) {\n        return overflow[side] >= 0;\n    });\n}\nfunction hide(_ref) {\n    var state = _ref.state, name = _ref.name;\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var preventedOffsets = state.modifiersData.preventOverflow;\n    var referenceOverflow = detectOverflow(state, {\n        elementContext: \"reference\"\n    });\n    var popperAltOverflow = detectOverflow(state, {\n        altBoundary: true\n    });\n    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n    state.modifiersData[name] = {\n        referenceClippingOffsets: referenceClippingOffsets,\n        popperEscapeOffsets: popperEscapeOffsets,\n        isReferenceHidden: isReferenceHidden,\n        hasPopperEscaped: hasPopperEscaped\n    };\n    state.attributes.popper = Object.assign({}, state.attributes.popper, {\n        \"data-popper-reference-hidden\": isReferenceHidden,\n        \"data-popper-escaped\": hasPopperEscaped\n    });\n} // eslint-disable-next-line import/no-unused-modules\nvar hide$1 = {\n    name: \"hide\",\n    enabled: true,\n    phase: \"main\",\n    requiresIfExists: [\n        \"preventOverflow\"\n    ],\n    fn: hide\n};\nfunction distanceAndSkiddingToXY(placement, rects, offset) {\n    var basePlacement = getBasePlacement(placement);\n    var invertDistance = [\n        left,\n        top\n    ].indexOf(basePlacement) >= 0 ? -1 : 1;\n    var _ref = typeof offset === \"function\" ? offset(Object.assign({}, rects, {\n        placement: placement\n    })) : offset, skidding = _ref[0], distance = _ref[1];\n    skidding = skidding || 0;\n    distance = (distance || 0) * invertDistance;\n    return [\n        left,\n        right\n    ].indexOf(basePlacement) >= 0 ? {\n        x: distance,\n        y: skidding\n    } : {\n        x: skidding,\n        y: distance\n    };\n}\nfunction offset(_ref2) {\n    var state = _ref2.state, options = _ref2.options, name = _ref2.name;\n    var _options$offset = options.offset, offset = _options$offset === void 0 ? [\n        0,\n        0\n    ] : _options$offset;\n    var data = placements.reduce(function(acc, placement) {\n        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n        return acc;\n    }, {});\n    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;\n    if (state.modifiersData.popperOffsets != null) {\n        state.modifiersData.popperOffsets.x += x;\n        state.modifiersData.popperOffsets.y += y;\n    }\n    state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\nvar offset$1 = {\n    name: \"offset\",\n    enabled: true,\n    phase: \"main\",\n    requires: [\n        \"popperOffsets\"\n    ],\n    fn: offset\n};\nfunction popperOffsets(_ref) {\n    var state = _ref.state, name = _ref.name;\n    // Offsets are the actual position the popper needs to have to be\n    // properly positioned near its reference element\n    // This is the most basic placement, and will be adjusted by\n    // the modifiers in the next step\n    state.modifiersData[name] = computeOffsets({\n        reference: state.rects.reference,\n        element: state.rects.popper,\n        strategy: \"absolute\",\n        placement: state.placement\n    });\n} // eslint-disable-next-line import/no-unused-modules\nvar popperOffsets$1 = {\n    name: \"popperOffsets\",\n    enabled: true,\n    phase: \"read\",\n    fn: popperOffsets,\n    data: {}\n};\nfunction getAltAxis(axis) {\n    return axis === \"x\" ? \"y\" : \"x\";\n}\nfunction preventOverflow(_ref) {\n    var state = _ref.state, options = _ref.options, name = _ref.name;\n    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n    var overflow = detectOverflow(state, {\n        boundary: boundary,\n        rootBoundary: rootBoundary,\n        padding: padding,\n        altBoundary: altBoundary\n    });\n    var basePlacement = getBasePlacement(state.placement);\n    var variation = getVariation(state.placement);\n    var isBasePlacement = !variation;\n    var mainAxis = getMainAxisFromPlacement(basePlacement);\n    var altAxis = getAltAxis(mainAxis);\n    var popperOffsets = state.modifiersData.popperOffsets;\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var tetherOffsetValue = typeof tetherOffset === \"function\" ? tetherOffset(Object.assign({}, state.rects, {\n        placement: state.placement\n    })) : tetherOffset;\n    var normalizedTetherOffsetValue = typeof tetherOffsetValue === \"number\" ? {\n        mainAxis: tetherOffsetValue,\n        altAxis: tetherOffsetValue\n    } : Object.assign({\n        mainAxis: 0,\n        altAxis: 0\n    }, tetherOffsetValue);\n    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n    var data = {\n        x: 0,\n        y: 0\n    };\n    if (!popperOffsets) {\n        return;\n    }\n    if (checkMainAxis) {\n        var _offsetModifierState$;\n        var mainSide = mainAxis === \"y\" ? top : left;\n        var altSide = mainAxis === \"y\" ? bottom : right;\n        var len = mainAxis === \"y\" ? \"height\" : \"width\";\n        var offset = popperOffsets[mainAxis];\n        var min$1 = offset + overflow[mainSide];\n        var max$1 = offset - overflow[altSide];\n        var additive = tether ? -popperRect[len] / 2 : 0;\n        var minLen = variation === start ? referenceRect[len] : popperRect[len];\n        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n        // outside the reference bounds\n        var arrowElement = state.elements.arrow;\n        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n            width: 0,\n            height: 0\n        };\n        var arrowPaddingObject = state.modifiersData[\"arrow#persistent\"] ? state.modifiersData[\"arrow#persistent\"].padding : getFreshSideObject();\n        var arrowPaddingMin = arrowPaddingObject[mainSide];\n        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n        // to include its full size in the calculation. If the reference is small\n        // and near the edge of a boundary, the popper can overflow even if the\n        // reference is not overflowing as well (e.g. virtual elements with no\n        // width or height)\n        var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n        var clientOffset = arrowOffsetParent ? mainAxis === \"y\" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;\n        var tetherMax = offset + maxOffset - offsetModifierValue;\n        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);\n        popperOffsets[mainAxis] = preventedOffset;\n        data[mainAxis] = preventedOffset - offset;\n    }\n    if (checkAltAxis) {\n        var _offsetModifierState$2;\n        var _mainSide = mainAxis === \"x\" ? top : left;\n        var _altSide = mainAxis === \"x\" ? bottom : right;\n        var _offset = popperOffsets[altAxis];\n        var _len = altAxis === \"y\" ? \"height\" : \"width\";\n        var _min = _offset + overflow[_mainSide];\n        var _max = _offset - overflow[_altSide];\n        var isOriginSide = [\n            top,\n            left\n        ].indexOf(basePlacement) !== -1;\n        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n        popperOffsets[altAxis] = _preventedOffset;\n        data[altAxis] = _preventedOffset - _offset;\n    }\n    state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\nvar preventOverflow$1 = {\n    name: \"preventOverflow\",\n    enabled: true,\n    phase: \"main\",\n    fn: preventOverflow,\n    requiresIfExists: [\n        \"offset\"\n    ]\n};\nfunction getHTMLElementScroll(element) {\n    return {\n        scrollLeft: element.scrollLeft,\n        scrollTop: element.scrollTop\n    };\n}\nfunction getNodeScroll(node) {\n    if (node === getWindow(node) || !isHTMLElement(node)) {\n        return getWindowScroll(node);\n    } else {\n        return getHTMLElementScroll(node);\n    }\n}\nfunction isElementScaled(element) {\n    var rect = element.getBoundingClientRect();\n    var scaleX = round(rect.width) / element.offsetWidth || 1;\n    var scaleY = round(rect.height) / element.offsetHeight || 1;\n    return scaleX !== 1 || scaleY !== 1;\n} // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\nfunction getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n    if (isFixed === void 0) {\n        isFixed = false;\n    }\n    var isOffsetParentAnElement = isHTMLElement(offsetParent);\n    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n    var documentElement = getDocumentElement(offsetParent);\n    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);\n    var scroll = {\n        scrollLeft: 0,\n        scrollTop: 0\n    };\n    var offsets = {\n        x: 0,\n        y: 0\n    };\n    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n        if (getNodeName(offsetParent) !== \"body\" || // https://github.com/popperjs/popper-core/issues/1078\n        isScrollParent(documentElement)) {\n            scroll = getNodeScroll(offsetParent);\n        }\n        if (isHTMLElement(offsetParent)) {\n            offsets = getBoundingClientRect(offsetParent, true);\n            offsets.x += offsetParent.clientLeft;\n            offsets.y += offsetParent.clientTop;\n        } else if (documentElement) {\n            offsets.x = getWindowScrollBarX(documentElement);\n        }\n    }\n    return {\n        x: rect.left + scroll.scrollLeft - offsets.x,\n        y: rect.top + scroll.scrollTop - offsets.y,\n        width: rect.width,\n        height: rect.height\n    };\n}\nfunction order(modifiers) {\n    var map = new Map();\n    var visited = new Set();\n    var result = [];\n    modifiers.forEach(function(modifier) {\n        map.set(modifier.name, modifier);\n    }); // On visiting object, check for its dependencies and visit them recursively\n    function sort(modifier) {\n        visited.add(modifier.name);\n        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n        requires.forEach(function(dep) {\n            if (!visited.has(dep)) {\n                var depModifier = map.get(dep);\n                if (depModifier) {\n                    sort(depModifier);\n                }\n            }\n        });\n        result.push(modifier);\n    }\n    modifiers.forEach(function(modifier) {\n        if (!visited.has(modifier.name)) {\n            // check for visited object\n            sort(modifier);\n        }\n    });\n    return result;\n}\nfunction orderModifiers(modifiers) {\n    // order based on dependencies\n    var orderedModifiers = order(modifiers); // order based on phase\n    return modifierPhases.reduce(function(acc, phase) {\n        return acc.concat(orderedModifiers.filter(function(modifier) {\n            return modifier.phase === phase;\n        }));\n    }, []);\n}\nfunction debounce(fn) {\n    var pending;\n    return function() {\n        if (!pending) {\n            pending = new Promise(function(resolve) {\n                Promise.resolve().then(function() {\n                    pending = undefined;\n                    resolve(fn());\n                });\n            });\n        }\n        return pending;\n    };\n}\nfunction format(str) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return [].concat(args).reduce(function(p, c) {\n        return p.replace(/%s/, c);\n    }, str);\n}\nvar INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nvar MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nvar VALID_PROPERTIES = [\n    \"name\",\n    \"enabled\",\n    \"phase\",\n    \"fn\",\n    \"effect\",\n    \"requires\",\n    \"options\"\n];\nfunction validateModifiers(modifiers) {\n    modifiers.forEach(function(modifier) {\n        [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`\n        .filter(function(value, index, self) {\n            return self.indexOf(value) === index;\n        }).forEach(function(key) {\n            switch(key){\n                case \"name\":\n                    if (typeof modifier.name !== \"string\") {\n                        console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', '\"' + String(modifier.name) + '\"'));\n                    }\n                    break;\n                case \"enabled\":\n                    if (typeof modifier.enabled !== \"boolean\") {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', '\"' + String(modifier.enabled) + '\"'));\n                    }\n                    break;\n                case \"phase\":\n                    if (modifierPhases.indexOf(modifier.phase) < 0) {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', \"either \" + modifierPhases.join(\", \"), '\"' + String(modifier.phase) + '\"'));\n                    }\n                    break;\n                case \"fn\":\n                    if (typeof modifier.fn !== \"function\") {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', '\"' + String(modifier.fn) + '\"'));\n                    }\n                    break;\n                case \"effect\":\n                    if (modifier.effect != null && typeof modifier.effect !== \"function\") {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', '\"' + String(modifier.fn) + '\"'));\n                    }\n                    break;\n                case \"requires\":\n                    if (modifier.requires != null && !Array.isArray(modifier.requires)) {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', '\"' + String(modifier.requires) + '\"'));\n                    }\n                    break;\n                case \"requiresIfExists\":\n                    if (!Array.isArray(modifier.requiresIfExists)) {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', '\"' + String(modifier.requiresIfExists) + '\"'));\n                    }\n                    break;\n                case \"options\":\n                case \"data\":\n                    break;\n                default:\n                    console.error('PopperJS: an invalid property has been provided to the \"' + modifier.name + '\" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {\n                        return '\"' + s + '\"';\n                    }).join(\", \") + '; but \"' + key + '\" was provided.');\n            }\n            modifier.requires && modifier.requires.forEach(function(requirement) {\n                if (modifiers.find(function(mod) {\n                    return mod.name === requirement;\n                }) == null) {\n                    console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n                }\n            });\n        });\n    });\n}\nfunction uniqueBy(arr, fn) {\n    var identifiers = new Set();\n    return arr.filter(function(item) {\n        var identifier = fn(item);\n        if (!identifiers.has(identifier)) {\n            identifiers.add(identifier);\n            return true;\n        }\n    });\n}\nfunction mergeByName(modifiers) {\n    var merged = modifiers.reduce(function(merged, current) {\n        var existing = merged[current.name];\n        merged[current.name] = existing ? Object.assign({}, existing, current, {\n            options: Object.assign({}, existing.options, current.options),\n            data: Object.assign({}, existing.data, current.data)\n        }) : current;\n        return merged;\n    }, {}); // IE11 does not support Object.values\n    return Object.keys(merged).map(function(key) {\n        return merged[key];\n    });\n}\nvar INVALID_ELEMENT_ERROR = \"Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.\";\nvar INFINITE_LOOP_ERROR = \"Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.\";\nvar DEFAULT_OPTIONS = {\n    placement: \"bottom\",\n    modifiers: [],\n    strategy: \"absolute\"\n};\nfunction areValidElements() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    return !args.some(function(element) {\n        return !(element && typeof element.getBoundingClientRect === \"function\");\n    });\n}\nfunction popperGenerator(generatorOptions) {\n    if (generatorOptions === void 0) {\n        generatorOptions = {};\n    }\n    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n    return function createPopper(reference, popper, options) {\n        if (options === void 0) {\n            options = defaultOptions;\n        }\n        var state = {\n            placement: \"bottom\",\n            orderedModifiers: [],\n            options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n            modifiersData: {},\n            elements: {\n                reference: reference,\n                popper: popper\n            },\n            attributes: {},\n            styles: {}\n        };\n        var effectCleanupFns = [];\n        var isDestroyed = false;\n        var instance = {\n            state: state,\n            setOptions: function setOptions(setOptionsAction) {\n                var options = typeof setOptionsAction === \"function\" ? setOptionsAction(state.options) : setOptionsAction;\n                cleanupModifierEffects();\n                state.options = Object.assign({}, defaultOptions, state.options, options);\n                state.scrollParents = {\n                    reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n                    popper: listScrollParents(popper)\n                }; // Orders the modifiers based on their dependencies and `phase`\n                // properties\n                var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n                state.orderedModifiers = orderedModifiers.filter(function(m) {\n                    return m.enabled;\n                }); // Validate the provided modifiers so that the consumer will get warned\n                // if one of the modifiers is invalid for any reason\n                if (true) {\n                    var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {\n                        var name = _ref.name;\n                        return name;\n                    });\n                    validateModifiers(modifiers);\n                    if (getBasePlacement(state.options.placement) === auto) {\n                        var flipModifier = state.orderedModifiers.find(function(_ref2) {\n                            var name = _ref2.name;\n                            return name === \"flip\";\n                        });\n                        if (!flipModifier) {\n                            console.error([\n                                'Popper: \"auto\" placements require the \"flip\" modifier be',\n                                \"present and enabled to work.\"\n                            ].join(\" \"));\n                        }\n                    }\n                    var _getComputedStyle = getComputedStyle(popper), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can\n                    // cause bugs with positioning, so we'll warn the consumer\n                    if ([\n                        marginTop,\n                        marginRight,\n                        marginBottom,\n                        marginLeft\n                    ].some(function(margin) {\n                        return parseFloat(margin);\n                    })) {\n                        console.warn([\n                            'Popper: CSS \"margin\" styles cannot be used to apply padding',\n                            \"between the popper and its reference element or boundary.\",\n                            \"To replicate margin, use the `offset` modifier, as well as\",\n                            \"the `padding` option in the `preventOverflow` and `flip`\",\n                            \"modifiers.\"\n                        ].join(\" \"));\n                    }\n                }\n                runModifierEffects();\n                return instance.update();\n            },\n            // Sync update – it will always be executed, even if not necessary. This\n            // is useful for low frequency updates where sync behavior simplifies the\n            // logic.\n            // For high frequency updates (e.g. `resize` and `scroll` events), always\n            // prefer the async Popper#update method\n            forceUpdate: function forceUpdate() {\n                if (isDestroyed) {\n                    return;\n                }\n                var _state$elements = state.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n                // anymore\n                if (!areValidElements(reference, popper)) {\n                    if (true) {\n                        console.error(INVALID_ELEMENT_ERROR);\n                    }\n                    return;\n                } // Store the reference and popper rects to be read by modifiers\n                state.rects = {\n                    reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === \"fixed\"),\n                    popper: getLayoutRect(popper)\n                }; // Modifiers have the ability to reset the current update cycle. The\n                // most common use case for this is the `flip` modifier changing the\n                // placement, which then needs to re-run all the modifiers, because the\n                // logic was previously ran for the previous placement and is therefore\n                // stale/incorrect\n                state.reset = false;\n                state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n                // is filled with the initial data specified by the modifier. This means\n                // it doesn't persist and is fresh on each update.\n                // To ensure persistent data, use `${name}#persistent`\n                state.orderedModifiers.forEach(function(modifier) {\n                    return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n                });\n                var __debug_loops__ = 0;\n                for(var index = 0; index < state.orderedModifiers.length; index++){\n                    if (true) {\n                        __debug_loops__ += 1;\n                        if (__debug_loops__ > 100) {\n                            console.error(INFINITE_LOOP_ERROR);\n                            break;\n                        }\n                    }\n                    if (state.reset === true) {\n                        state.reset = false;\n                        index = -1;\n                        continue;\n                    }\n                    var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;\n                    if (typeof fn === \"function\") {\n                        state = fn({\n                            state: state,\n                            options: _options,\n                            name: name,\n                            instance: instance\n                        }) || state;\n                    }\n                }\n            },\n            // Async and optimistically optimized update – it will not be executed if\n            // not necessary (debounced to run at most once-per-tick)\n            update: debounce(function() {\n                return new Promise(function(resolve) {\n                    instance.forceUpdate();\n                    resolve(state);\n                });\n            }),\n            destroy: function destroy() {\n                cleanupModifierEffects();\n                isDestroyed = true;\n            }\n        };\n        if (!areValidElements(reference, popper)) {\n            if (true) {\n                console.error(INVALID_ELEMENT_ERROR);\n            }\n            return instance;\n        }\n        instance.setOptions(options).then(function(state) {\n            if (!isDestroyed && options.onFirstUpdate) {\n                options.onFirstUpdate(state);\n            }\n        }); // Modifiers have the ability to execute arbitrary code before the first\n        // update cycle runs. They will be executed in the same order as the update\n        // cycle. This is useful when a modifier adds some persistent data that\n        // other modifiers need to use, but the modifier is run after the dependent\n        // one.\n        function runModifierEffects() {\n            state.orderedModifiers.forEach(function(_ref3) {\n                var name = _ref3.name, _ref3$options = _ref3.options, options = _ref3$options === void 0 ? {} : _ref3$options, effect = _ref3.effect;\n                if (typeof effect === \"function\") {\n                    var cleanupFn = effect({\n                        state: state,\n                        name: name,\n                        instance: instance,\n                        options: options\n                    });\n                    var noopFn = function noopFn() {};\n                    effectCleanupFns.push(cleanupFn || noopFn);\n                }\n            });\n        }\n        function cleanupModifierEffects() {\n            effectCleanupFns.forEach(function(fn) {\n                return fn();\n            });\n            effectCleanupFns = [];\n        }\n        return instance;\n    };\n}\n// For the common JS build we will turn this file into a bundle with no imports.\n// This is b/c the Popper lib is all esm files, and would break in a common js only environment\nconst createPopper = popperGenerator({\n    defaultModifiers: [\n        hide$1,\n        popperOffsets$1,\n        computeStyles$1,\n        eventListeners,\n        offset$1,\n        flip$1,\n        preventOverflow$1,\n        arrow$1\n    ]\n});\nexports.createPopper = createPopper;\nexports.placements = placements;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/popper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/ssr.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/ssr.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nvar _ssr = __webpack_require__(/*! @react-aria/ssr */ \"(ssr)/./node_modules/.pnpm/@react-aria+ssr@3.9.1_react@18.2.0/node_modules/@react-aria/ssr/dist/main.js\");\nexports.useSSRSafeId = _ssr.useSSRSafeId;\nexports.useIsSSR = _ssr.useIsSSR;\nexports.SSRProvider = _ssr.SSRProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy9zc3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsa0JBQWtCLEdBQUc7QUFDckIsSUFBSUUsT0FBT0MsbUJBQU9BLENBQUMsZ0lBQWlCO0FBQ3BDSCxvQkFBb0IsR0FBR0UsS0FBS0UsWUFBWTtBQUN4Q0osZ0JBQWdCLEdBQUdFLEtBQUtHLFFBQVE7QUFDaENMLG1CQUFtQixHQUFHRSxLQUFLSSxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb20zNjUvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy9zc3IuanM/Y2ZhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBfc3NyID0gcmVxdWlyZShcIkByZWFjdC1hcmlhL3NzclwiKTtcbmV4cG9ydHMudXNlU1NSU2FmZUlkID0gX3Nzci51c2VTU1JTYWZlSWQ7XG5leHBvcnRzLnVzZUlzU1NSID0gX3Nzci51c2VJc1NTUjtcbmV4cG9ydHMuU1NSUHJvdmlkZXIgPSBfc3NyLlNTUlByb3ZpZGVyOyJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsIl9zc3IiLCJyZXF1aXJlIiwidXNlU1NSU2FmZUlkIiwidXNlSXNTU1IiLCJTU1JQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/ssr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/useClickOutside.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/useClickOutside.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = exports.getRefTarget = void 0;\nvar _contains = _interopRequireDefault(__webpack_require__(/*! dom-helpers/contains */ \"(ssr)/./node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/contains.js\"));\nvar _listen = _interopRequireDefault(__webpack_require__(/*! dom-helpers/listen */ \"(ssr)/./node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/listen.js\"));\nvar _ownerDocument = _interopRequireDefault(__webpack_require__(/*! dom-helpers/ownerDocument */ \"(ssr)/./node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/ownerDocument.js\"));\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _useEventCallback = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useEventCallback */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useEventCallback.js\"));\nvar _warning = _interopRequireDefault(__webpack_require__(/*! warning */ \"(ssr)/./node_modules/.pnpm/warning@4.0.3/node_modules/warning/warning.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst noop = ()=>{};\nfunction isLeftClickEvent(event) {\n    return event.button === 0;\n}\nfunction isModifiedEvent(event) {\n    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nconst getRefTarget = (ref)=>ref && (\"current\" in ref ? ref.current : ref);\nexports.getRefTarget = getRefTarget;\nconst InitialTriggerEvents = {\n    click: \"mousedown\",\n    mouseup: \"mousedown\",\n    pointerup: \"pointerdown\"\n};\n/**\n * The `useClickOutside` hook registers your callback on the document that fires\n * when a pointer event is registered outside of the provided ref or element.\n *\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\n * @param {function} onClickOutside\n * @param {object=}  options\n * @param {boolean=} options.disabled\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\n */ function useClickOutside(ref, onClickOutside = noop, { disabled, clickTrigger = \"click\" } = {}) {\n    const preventMouseClickOutsideRef = (0, _react.useRef)(false);\n    const waitingForTrigger = (0, _react.useRef)(false);\n    const handleMouseCapture = (0, _react.useCallback)((e)=>{\n        const currentTarget = getRefTarget(ref);\n        (0, _warning.default)(!!currentTarget, \"ClickOutside captured a close event but does not have a ref to compare it to. \" + \"useClickOutside(), should be passed a ref that resolves to a DOM node\");\n        preventMouseClickOutsideRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!(0, _contains.default)(currentTarget, e.target) || waitingForTrigger.current;\n        waitingForTrigger.current = false;\n    }, [\n        ref\n    ]);\n    const handleInitialMouse = (0, _useEventCallback.default)((e)=>{\n        const currentTarget = getRefTarget(ref);\n        if (currentTarget && (0, _contains.default)(currentTarget, e.target)) {\n            waitingForTrigger.current = true;\n        }\n    });\n    const handleMouse = (0, _useEventCallback.default)((e)=>{\n        if (!preventMouseClickOutsideRef.current) {\n            onClickOutside(e);\n        }\n    });\n    (0, _react.useEffect)(()=>{\n        var _ownerWindow$event, _ownerWindow$parent;\n        if (disabled || ref == null) return undefined;\n        const doc = (0, _ownerDocument.default)(getRefTarget(ref));\n        const ownerWindow = doc.defaultView || window;\n        // Store the current event to avoid triggering handlers immediately\n        // For things rendered in an iframe, the event might originate on the parent window\n        // so we should fall back to that global event if the local one doesn't exist\n        // https://github.com/facebook/react/issues/20074\n        let currentEvent = (_ownerWindow$event = ownerWindow.event) != null ? _ownerWindow$event : (_ownerWindow$parent = ownerWindow.parent) == null ? void 0 : _ownerWindow$parent.event;\n        let removeInitialTriggerListener = null;\n        if (InitialTriggerEvents[clickTrigger]) {\n            removeInitialTriggerListener = (0, _listen.default)(doc, InitialTriggerEvents[clickTrigger], handleInitialMouse, true);\n        }\n        // Use capture for this listener so it fires before React's listener, to\n        // avoid false positives in the contains() check below if the target DOM\n        // element is removed in the React mouse callback.\n        const removeMouseCaptureListener = (0, _listen.default)(doc, clickTrigger, handleMouseCapture, true);\n        const removeMouseListener = (0, _listen.default)(doc, clickTrigger, (e)=>{\n            // skip if this event is the same as the one running when we added the handlers\n            if (e === currentEvent) {\n                currentEvent = undefined;\n                return;\n            }\n            handleMouse(e);\n        });\n        let mobileSafariHackListeners = [];\n        if (\"ontouchstart\" in doc.documentElement) {\n            mobileSafariHackListeners = [].slice.call(doc.body.children).map((el)=>(0, _listen.default)(el, \"mousemove\", noop));\n        }\n        return ()=>{\n            removeInitialTriggerListener == null ? void 0 : removeInitialTriggerListener();\n            removeMouseCaptureListener();\n            removeMouseListener();\n            mobileSafariHackListeners.forEach((remove)=>remove());\n        };\n    }, [\n        ref,\n        disabled,\n        clickTrigger,\n        handleMouseCapture,\n        handleInitialMouse,\n        handleMouse\n    ]);\n}\nvar _default = useClickOutside;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/useClickOutside.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/usePopper.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/usePopper.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _dequal = __webpack_require__(/*! dequal */ \"(ssr)/./node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/dist/index.js\");\nvar _useSafeState = _interopRequireDefault(__webpack_require__(/*! @restart/hooks/useSafeState */ \"(ssr)/./node_modules/.pnpm/@restart+hooks@0.4.16_react@18.2.0/node_modules/@restart/hooks/cjs/useSafeState.js\"));\nvar _popper = __webpack_require__(/*! ./popper */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/popper.js\");\nconst _excluded = [\n    \"enabled\",\n    \"placement\",\n    \"strategy\",\n    \"modifiers\"\n];\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nconst disabledApplyStylesModifier = {\n    name: \"applyStyles\",\n    enabled: false,\n    phase: \"afterWrite\",\n    fn: ()=>undefined\n};\n// until docjs supports type exports...\nconst ariaDescribedByModifier = {\n    name: \"ariaDescribedBy\",\n    enabled: true,\n    phase: \"afterWrite\",\n    effect: ({ state })=>()=>{\n            const { reference, popper } = state.elements;\n            if (\"removeAttribute\" in reference) {\n                const ids = (reference.getAttribute(\"aria-describedby\") || \"\").split(\",\").filter((id)=>id.trim() !== popper.id);\n                if (!ids.length) reference.removeAttribute(\"aria-describedby\");\n                else reference.setAttribute(\"aria-describedby\", ids.join(\",\"));\n            }\n        },\n    fn: ({ state })=>{\n        var _popper$getAttribute;\n        const { popper, reference } = state.elements;\n        const role = (_popper$getAttribute = popper.getAttribute(\"role\")) == null ? void 0 : _popper$getAttribute.toLowerCase();\n        if (popper.id && role === \"tooltip\" && \"setAttribute\" in reference) {\n            const ids = reference.getAttribute(\"aria-describedby\");\n            if (ids && ids.split(\",\").indexOf(popper.id) !== -1) {\n                return;\n            }\n            reference.setAttribute(\"aria-describedby\", ids ? `${ids},${popper.id}` : popper.id);\n        }\n    }\n};\nconst EMPTY_MODIFIERS = [];\n/**\n * Position an element relative some reference element using Popper.js\n *\n * @param referenceElement\n * @param popperElement\n * @param {object}      options\n * @param {object=}     options.modifiers Popper.js modifiers\n * @param {boolean=}    options.enabled toggle the popper functionality on/off\n * @param {string=}     options.placement The popper element placement relative to the reference element\n * @param {string=}     options.strategy the positioning strategy\n * @param {function=}   options.onCreate called when the popper is created\n * @param {function=}   options.onUpdate called when the popper is updated\n *\n * @returns {UsePopperState} The popper state\n */ function usePopper(referenceElement, popperElement, _ref = {}) {\n    let { enabled = true, placement = \"bottom\", strategy = \"absolute\", modifiers = EMPTY_MODIFIERS } = _ref, config = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const prevModifiers = (0, _react.useRef)(modifiers);\n    const popperInstanceRef = (0, _react.useRef)();\n    const update = (0, _react.useCallback)(()=>{\n        var _popperInstanceRef$cu;\n        (_popperInstanceRef$cu = popperInstanceRef.current) == null ? void 0 : _popperInstanceRef$cu.update();\n    }, []);\n    const forceUpdate = (0, _react.useCallback)(()=>{\n        var _popperInstanceRef$cu2;\n        (_popperInstanceRef$cu2 = popperInstanceRef.current) == null ? void 0 : _popperInstanceRef$cu2.forceUpdate();\n    }, []);\n    const [popperState, setState] = (0, _useSafeState.default)((0, _react.useState)({\n        placement,\n        update,\n        forceUpdate,\n        attributes: {},\n        styles: {\n            popper: {},\n            arrow: {}\n        }\n    }));\n    const updateModifier = (0, _react.useMemo)(()=>({\n            name: \"updateStateModifier\",\n            enabled: true,\n            phase: \"write\",\n            requires: [\n                \"computeStyles\"\n            ],\n            fn: ({ state })=>{\n                const styles = {};\n                const attributes = {};\n                Object.keys(state.elements).forEach((element)=>{\n                    styles[element] = state.styles[element];\n                    attributes[element] = state.attributes[element];\n                });\n                setState({\n                    state,\n                    styles,\n                    attributes,\n                    update,\n                    forceUpdate,\n                    placement: state.placement\n                });\n            }\n        }), [\n        update,\n        forceUpdate,\n        setState\n    ]);\n    const nextModifiers = (0, _react.useMemo)(()=>{\n        if (!(0, _dequal.dequal)(prevModifiers.current, modifiers)) {\n            prevModifiers.current = modifiers;\n        }\n        return prevModifiers.current;\n    }, [\n        modifiers\n    ]);\n    (0, _react.useEffect)(()=>{\n        if (!popperInstanceRef.current || !enabled) return;\n        popperInstanceRef.current.setOptions({\n            placement,\n            strategy,\n            modifiers: [\n                ...nextModifiers,\n                updateModifier,\n                disabledApplyStylesModifier\n            ]\n        });\n    }, [\n        strategy,\n        placement,\n        updateModifier,\n        enabled,\n        nextModifiers\n    ]);\n    (0, _react.useEffect)(()=>{\n        if (!enabled || referenceElement == null || popperElement == null) {\n            return undefined;\n        }\n        popperInstanceRef.current = (0, _popper.createPopper)(referenceElement, popperElement, Object.assign({}, config, {\n            placement,\n            strategy,\n            modifiers: [\n                ...nextModifiers,\n                ariaDescribedByModifier,\n                updateModifier\n            ]\n        }));\n        return ()=>{\n            if (popperInstanceRef.current != null) {\n                popperInstanceRef.current.destroy();\n                popperInstanceRef.current = undefined;\n                setState((s)=>Object.assign({}, s, {\n                        attributes: {},\n                        styles: {\n                            popper: {}\n                        }\n                    }));\n            }\n        };\n    // This is only run once to _create_ the popper\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        enabled,\n        referenceElement,\n        popperElement\n    ]);\n    return popperState;\n}\nvar _default = usePopper;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy91c2VQb3BwZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsa0JBQWtCLEdBQUc7QUFDckJBLGtCQUFlLEdBQUcsS0FBSztBQUN2QixJQUFJRyxTQUFTQyxtQkFBT0EsQ0FBQyxxS0FBTztBQUM1QixJQUFJQyxVQUFVRCxtQkFBT0EsQ0FBQyx5RkFBUTtBQUM5QixJQUFJRSxnQkFBZ0JDLHVCQUF1QkgsbUJBQU9BLENBQUMsa0pBQTZCO0FBQ2hGLElBQUlJLFVBQVVKLG1CQUFPQSxDQUFDLG1JQUFVO0FBQ2hDLE1BQU1LLFlBQVk7SUFBQztJQUFXO0lBQWE7SUFBWTtDQUFZO0FBQ25FLFNBQVNGLHVCQUF1QkcsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlULFVBQVUsR0FBR1MsTUFBTTtRQUFFUixTQUFTUTtJQUFJO0FBQUc7QUFDOUYsU0FBU0MsOEJBQThCQyxNQUFNLEVBQUVDLFFBQVE7SUFBSSxJQUFJRCxVQUFVLE1BQU0sT0FBTyxDQUFDO0lBQUcsSUFBSUUsU0FBUyxDQUFDO0lBQUcsSUFBSUMsYUFBYUMsT0FBT0MsSUFBSSxDQUFDTDtJQUFTLElBQUlNLEtBQUtDO0lBQUcsSUFBS0EsSUFBSSxHQUFHQSxJQUFJSixXQUFXSyxNQUFNLEVBQUVELElBQUs7UUFBRUQsTUFBTUgsVUFBVSxDQUFDSSxFQUFFO1FBQUUsSUFBSU4sU0FBU1EsT0FBTyxDQUFDSCxRQUFRLEdBQUc7UUFBVUosTUFBTSxDQUFDSSxJQUFJLEdBQUdOLE1BQU0sQ0FBQ00sSUFBSTtJQUFFO0lBQUUsT0FBT0o7QUFBUTtBQUNsVCxNQUFNUSw4QkFBOEI7SUFDbENDLE1BQU07SUFDTkMsU0FBUztJQUNUQyxPQUFPO0lBQ1BDLElBQUksSUFBTUM7QUFDWjtBQUVBLHVDQUF1QztBQUV2QyxNQUFNQywwQkFBMEI7SUFDOUJMLE1BQU07SUFDTkMsU0FBUztJQUNUQyxPQUFPO0lBQ1BJLFFBQVEsQ0FBQyxFQUNQQyxLQUFLLEVBQ04sR0FBSztZQUNKLE1BQU0sRUFDSkMsU0FBUyxFQUNUQyxNQUFNLEVBQ1AsR0FBR0YsTUFBTUcsUUFBUTtZQUNsQixJQUFJLHFCQUFxQkYsV0FBVztnQkFDbEMsTUFBTUcsTUFBTSxDQUFDSCxVQUFVSSxZQUFZLENBQUMsdUJBQXVCLEVBQUMsRUFBR0MsS0FBSyxDQUFDLEtBQUtDLE1BQU0sQ0FBQ0MsQ0FBQUEsS0FBTUEsR0FBR0MsSUFBSSxPQUFPUCxPQUFPTSxFQUFFO2dCQUM5RyxJQUFJLENBQUNKLElBQUlkLE1BQU0sRUFBRVcsVUFBVVMsZUFBZSxDQUFDO3FCQUF5QlQsVUFBVVUsWUFBWSxDQUFDLG9CQUFvQlAsSUFBSVEsSUFBSSxDQUFDO1lBQzFIO1FBQ0Y7SUFDQWhCLElBQUksQ0FBQyxFQUNISSxLQUFLLEVBQ047UUFDQyxJQUFJYTtRQUNKLE1BQU0sRUFDSlgsTUFBTSxFQUNORCxTQUFTLEVBQ1YsR0FBR0QsTUFBTUcsUUFBUTtRQUNsQixNQUFNVyxPQUFPLENBQUNELHVCQUF1QlgsT0FBT0csWUFBWSxDQUFDLE9BQU0sS0FBTSxPQUFPLEtBQUssSUFBSVEscUJBQXFCRSxXQUFXO1FBQ3JILElBQUliLE9BQU9NLEVBQUUsSUFBSU0sU0FBUyxhQUFhLGtCQUFrQmIsV0FBVztZQUNsRSxNQUFNRyxNQUFNSCxVQUFVSSxZQUFZLENBQUM7WUFDbkMsSUFBSUQsT0FBT0EsSUFBSUUsS0FBSyxDQUFDLEtBQUtmLE9BQU8sQ0FBQ1csT0FBT00sRUFBRSxNQUFNLENBQUMsR0FBRztnQkFDbkQ7WUFDRjtZQUNBUCxVQUFVVSxZQUFZLENBQUMsb0JBQW9CUCxNQUFNLENBQUMsRUFBRUEsSUFBSSxDQUFDLEVBQUVGLE9BQU9NLEVBQUUsQ0FBQyxDQUFDLEdBQUdOLE9BQU9NLEVBQUU7UUFDcEY7SUFDRjtBQUNGO0FBQ0EsTUFBTVEsa0JBQWtCLEVBQUU7QUFDMUI7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDRCxTQUFTQyxVQUFVQyxnQkFBZ0IsRUFBRUMsYUFBYSxFQUFFQyxPQUFPLENBQUMsQ0FBQztJQUMzRCxJQUFJLEVBQ0ExQixVQUFVLElBQUksRUFDZDJCLFlBQVksUUFBUSxFQUNwQkMsV0FBVyxVQUFVLEVBQ3JCQyxZQUFZUCxlQUFlLEVBQzVCLEdBQUdJLE1BQ0pJLFNBQVMzQyw4QkFBOEJ1QyxNQUFNekM7SUFDL0MsTUFBTThDLGdCQUFnQixDQUFDLEdBQUdwRCxPQUFPcUQsTUFBTSxFQUFFSDtJQUN6QyxNQUFNSSxvQkFBb0IsQ0FBQyxHQUFHdEQsT0FBT3FELE1BQU07SUFDM0MsTUFBTUUsU0FBUyxDQUFDLEdBQUd2RCxPQUFPd0QsV0FBVyxFQUFFO1FBQ3JDLElBQUlDO1FBQ0hBLENBQUFBLHdCQUF3Qkgsa0JBQWtCSSxPQUFPLEtBQUssT0FBTyxLQUFLLElBQUlELHNCQUFzQkYsTUFBTTtJQUNyRyxHQUFHLEVBQUU7SUFDTCxNQUFNSSxjQUFjLENBQUMsR0FBRzNELE9BQU93RCxXQUFXLEVBQUU7UUFDMUMsSUFBSUk7UUFDSEEsQ0FBQUEseUJBQXlCTixrQkFBa0JJLE9BQU8sS0FBSyxPQUFPLEtBQUssSUFBSUUsdUJBQXVCRCxXQUFXO0lBQzVHLEdBQUcsRUFBRTtJQUNMLE1BQU0sQ0FBQ0UsYUFBYUMsU0FBUyxHQUFHLENBQUMsR0FBRzNELGNBQWNKLE9BQU8sRUFBRSxDQUFDLEdBQUdDLE9BQU8rRCxRQUFRLEVBQUU7UUFDOUVmO1FBQ0FPO1FBQ0FJO1FBQ0FLLFlBQVksQ0FBQztRQUNiQyxRQUFRO1lBQ05wQyxRQUFRLENBQUM7WUFDVHFDLE9BQU8sQ0FBQztRQUNWO0lBQ0Y7SUFDQSxNQUFNQyxpQkFBaUIsQ0FBQyxHQUFHbkUsT0FBT29FLE9BQU8sRUFBRSxJQUFPO1lBQ2hEaEQsTUFBTTtZQUNOQyxTQUFTO1lBQ1RDLE9BQU87WUFDUCtDLFVBQVU7Z0JBQUM7YUFBZ0I7WUFDM0I5QyxJQUFJLENBQUMsRUFDSEksS0FBSyxFQUNOO2dCQUNDLE1BQU1zQyxTQUFTLENBQUM7Z0JBQ2hCLE1BQU1ELGFBQWEsQ0FBQztnQkFDcEJuRCxPQUFPQyxJQUFJLENBQUNhLE1BQU1HLFFBQVEsRUFBRXdDLE9BQU8sQ0FBQ0MsQ0FBQUE7b0JBQ2xDTixNQUFNLENBQUNNLFFBQVEsR0FBRzVDLE1BQU1zQyxNQUFNLENBQUNNLFFBQVE7b0JBQ3ZDUCxVQUFVLENBQUNPLFFBQVEsR0FBRzVDLE1BQU1xQyxVQUFVLENBQUNPLFFBQVE7Z0JBQ2pEO2dCQUNBVCxTQUFTO29CQUNQbkM7b0JBQ0FzQztvQkFDQUQ7b0JBQ0FUO29CQUNBSTtvQkFDQVgsV0FBV3JCLE1BQU1xQixTQUFTO2dCQUM1QjtZQUNGO1FBQ0YsSUFBSTtRQUFDTztRQUFRSTtRQUFhRztLQUFTO0lBQ25DLE1BQU1VLGdCQUFnQixDQUFDLEdBQUd4RSxPQUFPb0UsT0FBTyxFQUFFO1FBQ3hDLElBQUksQ0FBQyxDQUFDLEdBQUdsRSxRQUFRdUUsTUFBTSxFQUFFckIsY0FBY00sT0FBTyxFQUFFUixZQUFZO1lBQzFERSxjQUFjTSxPQUFPLEdBQUdSO1FBQzFCO1FBQ0EsT0FBT0UsY0FBY00sT0FBTztJQUM5QixHQUFHO1FBQUNSO0tBQVU7SUFDYixJQUFHbEQsT0FBTzBFLFNBQVMsRUFBRTtRQUNwQixJQUFJLENBQUNwQixrQkFBa0JJLE9BQU8sSUFBSSxDQUFDckMsU0FBUztRQUM1Q2lDLGtCQUFrQkksT0FBTyxDQUFDaUIsVUFBVSxDQUFDO1lBQ25DM0I7WUFDQUM7WUFDQUMsV0FBVzttQkFBSXNCO2dCQUFlTDtnQkFBZ0JoRDthQUE0QjtRQUM1RTtJQUNGLEdBQUc7UUFBQzhCO1FBQVVEO1FBQVdtQjtRQUFnQjlDO1FBQVNtRDtLQUFjO0lBQy9ELElBQUd4RSxPQUFPMEUsU0FBUyxFQUFFO1FBQ3BCLElBQUksQ0FBQ3JELFdBQVd3QixvQkFBb0IsUUFBUUMsaUJBQWlCLE1BQU07WUFDakUsT0FBT3RCO1FBQ1Q7UUFDQThCLGtCQUFrQkksT0FBTyxHQUFHLENBQUMsR0FBR3JELFFBQVF1RSxZQUFZLEVBQUUvQixrQkFBa0JDLGVBQWVqQyxPQUFPZ0UsTUFBTSxDQUFDLENBQUMsR0FBRzFCLFFBQVE7WUFDL0dIO1lBQ0FDO1lBQ0FDLFdBQVc7bUJBQUlzQjtnQkFBZS9DO2dCQUF5QjBDO2FBQWU7UUFDeEU7UUFDQSxPQUFPO1lBQ0wsSUFBSWIsa0JBQWtCSSxPQUFPLElBQUksTUFBTTtnQkFDckNKLGtCQUFrQkksT0FBTyxDQUFDb0IsT0FBTztnQkFDakN4QixrQkFBa0JJLE9BQU8sR0FBR2xDO2dCQUM1QnNDLFNBQVNpQixDQUFBQSxJQUFLbEUsT0FBT2dFLE1BQU0sQ0FBQyxDQUFDLEdBQUdFLEdBQUc7d0JBQ2pDZixZQUFZLENBQUM7d0JBQ2JDLFFBQVE7NEJBQ05wQyxRQUFRLENBQUM7d0JBQ1g7b0JBQ0Y7WUFDRjtRQUNGO0lBQ0EsK0NBQStDO0lBQy9DLHVEQUF1RDtJQUN6RCxHQUFHO1FBQUNSO1FBQVN3QjtRQUFrQkM7S0FBYztJQUM3QyxPQUFPZTtBQUNUO0FBQ0EsSUFBSW1CLFdBQVdwQztBQUNmL0Msa0JBQWUsR0FBR21GIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb20zNjUvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy91c2VQb3BwZXIuanM/ZDc1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgX2RlcXVhbCA9IHJlcXVpcmUoXCJkZXF1YWxcIik7XG52YXIgX3VzZVNhZmVTdGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkByZXN0YXJ0L2hvb2tzL3VzZVNhZmVTdGF0ZVwiKSk7XG52YXIgX3BvcHBlciA9IHJlcXVpcmUoXCIuL3BvcHBlclwiKTtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImVuYWJsZWRcIiwgXCJwbGFjZW1lbnRcIiwgXCJzdHJhdGVneVwiLCBcIm1vZGlmaWVyc1wiXTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5jb25zdCBkaXNhYmxlZEFwcGx5U3R5bGVzTW9kaWZpZXIgPSB7XG4gIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gIGVuYWJsZWQ6IGZhbHNlLFxuICBwaGFzZTogJ2FmdGVyV3JpdGUnLFxuICBmbjogKCkgPT4gdW5kZWZpbmVkXG59O1xuXG4vLyB1bnRpbCBkb2NqcyBzdXBwb3J0cyB0eXBlIGV4cG9ydHMuLi5cblxuY29uc3QgYXJpYURlc2NyaWJlZEJ5TW9kaWZpZXIgPSB7XG4gIG5hbWU6ICdhcmlhRGVzY3JpYmVkQnknLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ2FmdGVyV3JpdGUnLFxuICBlZmZlY3Q6ICh7XG4gICAgc3RhdGVcbiAgfSkgPT4gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHJlZmVyZW5jZSxcbiAgICAgIHBvcHBlclxuICAgIH0gPSBzdGF0ZS5lbGVtZW50cztcbiAgICBpZiAoJ3JlbW92ZUF0dHJpYnV0ZScgaW4gcmVmZXJlbmNlKSB7XG4gICAgICBjb25zdCBpZHMgPSAocmVmZXJlbmNlLmdldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScpIHx8ICcnKS5zcGxpdCgnLCcpLmZpbHRlcihpZCA9PiBpZC50cmltKCkgIT09IHBvcHBlci5pZCk7XG4gICAgICBpZiAoIWlkcy5sZW5ndGgpIHJlZmVyZW5jZS5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKTtlbHNlIHJlZmVyZW5jZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknLCBpZHMuam9pbignLCcpKTtcbiAgICB9XG4gIH0sXG4gIGZuOiAoe1xuICAgIHN0YXRlXG4gIH0pID0+IHtcbiAgICB2YXIgX3BvcHBlciRnZXRBdHRyaWJ1dGU7XG4gICAgY29uc3Qge1xuICAgICAgcG9wcGVyLFxuICAgICAgcmVmZXJlbmNlXG4gICAgfSA9IHN0YXRlLmVsZW1lbnRzO1xuICAgIGNvbnN0IHJvbGUgPSAoX3BvcHBlciRnZXRBdHRyaWJ1dGUgPSBwb3BwZXIuZ2V0QXR0cmlidXRlKCdyb2xlJykpID09IG51bGwgPyB2b2lkIDAgOiBfcG9wcGVyJGdldEF0dHJpYnV0ZS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChwb3BwZXIuaWQgJiYgcm9sZSA9PT0gJ3Rvb2x0aXAnICYmICdzZXRBdHRyaWJ1dGUnIGluIHJlZmVyZW5jZSkge1xuICAgICAgY29uc3QgaWRzID0gcmVmZXJlbmNlLmdldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScpO1xuICAgICAgaWYgKGlkcyAmJiBpZHMuc3BsaXQoJywnKS5pbmRleE9mKHBvcHBlci5pZCkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlZmVyZW5jZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknLCBpZHMgPyBgJHtpZHN9LCR7cG9wcGVyLmlkfWAgOiBwb3BwZXIuaWQpO1xuICAgIH1cbiAgfVxufTtcbmNvbnN0IEVNUFRZX01PRElGSUVSUyA9IFtdO1xuLyoqXG4gKiBQb3NpdGlvbiBhbiBlbGVtZW50IHJlbGF0aXZlIHNvbWUgcmVmZXJlbmNlIGVsZW1lbnQgdXNpbmcgUG9wcGVyLmpzXG4gKlxuICogQHBhcmFtIHJlZmVyZW5jZUVsZW1lbnRcbiAqIEBwYXJhbSBwb3BwZXJFbGVtZW50XG4gKiBAcGFyYW0ge29iamVjdH0gICAgICBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdD19ICAgICBvcHRpb25zLm1vZGlmaWVycyBQb3BwZXIuanMgbW9kaWZpZXJzXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSAgICBvcHRpb25zLmVuYWJsZWQgdG9nZ2xlIHRoZSBwb3BwZXIgZnVuY3Rpb25hbGl0eSBvbi9vZmZcbiAqIEBwYXJhbSB7c3RyaW5nPX0gICAgIG9wdGlvbnMucGxhY2VtZW50IFRoZSBwb3BwZXIgZWxlbWVudCBwbGFjZW1lbnQgcmVsYXRpdmUgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZz19ICAgICBvcHRpb25zLnN0cmF0ZWd5IHRoZSBwb3NpdGlvbmluZyBzdHJhdGVneVxuICogQHBhcmFtIHtmdW5jdGlvbj19ICAgb3B0aW9ucy5vbkNyZWF0ZSBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIGNyZWF0ZWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb249fSAgIG9wdGlvbnMub25VcGRhdGUgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyB1cGRhdGVkXG4gKlxuICogQHJldHVybnMge1VzZVBvcHBlclN0YXRlfSBUaGUgcG9wcGVyIHN0YXRlXG4gKi9cbmZ1bmN0aW9uIHVzZVBvcHBlcihyZWZlcmVuY2VFbGVtZW50LCBwb3BwZXJFbGVtZW50LCBfcmVmID0ge30pIHtcbiAgbGV0IHtcbiAgICAgIGVuYWJsZWQgPSB0cnVlLFxuICAgICAgcGxhY2VtZW50ID0gJ2JvdHRvbScsXG4gICAgICBzdHJhdGVneSA9ICdhYnNvbHV0ZScsXG4gICAgICBtb2RpZmllcnMgPSBFTVBUWV9NT0RJRklFUlNcbiAgICB9ID0gX3JlZixcbiAgICBjb25maWcgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBfZXhjbHVkZWQpO1xuICBjb25zdCBwcmV2TW9kaWZpZXJzID0gKDAsIF9yZWFjdC51c2VSZWYpKG1vZGlmaWVycyk7XG4gIGNvbnN0IHBvcHBlckluc3RhbmNlUmVmID0gKDAsIF9yZWFjdC51c2VSZWYpKCk7XG4gIGNvbnN0IHVwZGF0ZSA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKCgpID0+IHtcbiAgICB2YXIgX3BvcHBlckluc3RhbmNlUmVmJGN1O1xuICAgIChfcG9wcGVySW5zdGFuY2VSZWYkY3UgPSBwb3BwZXJJbnN0YW5jZVJlZi5jdXJyZW50KSA9PSBudWxsID8gdm9pZCAwIDogX3BvcHBlckluc3RhbmNlUmVmJGN1LnVwZGF0ZSgpO1xuICB9LCBbXSk7XG4gIGNvbnN0IGZvcmNlVXBkYXRlID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoKCkgPT4ge1xuICAgIHZhciBfcG9wcGVySW5zdGFuY2VSZWYkY3UyO1xuICAgIChfcG9wcGVySW5zdGFuY2VSZWYkY3UyID0gcG9wcGVySW5zdGFuY2VSZWYuY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wb3BwZXJJbnN0YW5jZVJlZiRjdTIuZm9yY2VVcGRhdGUoKTtcbiAgfSwgW10pO1xuICBjb25zdCBbcG9wcGVyU3RhdGUsIHNldFN0YXRlXSA9ICgwLCBfdXNlU2FmZVN0YXRlLmRlZmF1bHQpKCgwLCBfcmVhY3QudXNlU3RhdGUpKHtcbiAgICBwbGFjZW1lbnQsXG4gICAgdXBkYXRlLFxuICAgIGZvcmNlVXBkYXRlLFxuICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgIHN0eWxlczoge1xuICAgICAgcG9wcGVyOiB7fSxcbiAgICAgIGFycm93OiB7fVxuICAgIH1cbiAgfSkpO1xuICBjb25zdCB1cGRhdGVNb2RpZmllciA9ICgwLCBfcmVhY3QudXNlTWVtbykoKCkgPT4gKHtcbiAgICBuYW1lOiAndXBkYXRlU3RhdGVNb2RpZmllcicsXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBwaGFzZTogJ3dyaXRlJyxcbiAgICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ10sXG4gICAgZm46ICh7XG4gICAgICBzdGF0ZVxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlcyA9IHt9O1xuICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHt9O1xuICAgICAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgIHN0eWxlc1tlbGVtZW50XSA9IHN0YXRlLnN0eWxlc1tlbGVtZW50XTtcbiAgICAgICAgYXR0cmlidXRlc1tlbGVtZW50XSA9IHN0YXRlLmF0dHJpYnV0ZXNbZWxlbWVudF07XG4gICAgICB9KTtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHN0eWxlcyxcbiAgICAgICAgYXR0cmlidXRlcyxcbiAgICAgICAgdXBkYXRlLFxuICAgICAgICBmb3JjZVVwZGF0ZSxcbiAgICAgICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSksIFt1cGRhdGUsIGZvcmNlVXBkYXRlLCBzZXRTdGF0ZV0pO1xuICBjb25zdCBuZXh0TW9kaWZpZXJzID0gKDAsIF9yZWFjdC51c2VNZW1vKSgoKSA9PiB7XG4gICAgaWYgKCEoMCwgX2RlcXVhbC5kZXF1YWwpKHByZXZNb2RpZmllcnMuY3VycmVudCwgbW9kaWZpZXJzKSkge1xuICAgICAgcHJldk1vZGlmaWVycy5jdXJyZW50ID0gbW9kaWZpZXJzO1xuICAgIH1cbiAgICByZXR1cm4gcHJldk1vZGlmaWVycy5jdXJyZW50O1xuICB9LCBbbW9kaWZpZXJzXSk7XG4gICgwLCBfcmVhY3QudXNlRWZmZWN0KSgoKSA9PiB7XG4gICAgaWYgKCFwb3BwZXJJbnN0YW5jZVJlZi5jdXJyZW50IHx8ICFlbmFibGVkKSByZXR1cm47XG4gICAgcG9wcGVySW5zdGFuY2VSZWYuY3VycmVudC5zZXRPcHRpb25zKHtcbiAgICAgIHBsYWNlbWVudCxcbiAgICAgIHN0cmF0ZWd5LFxuICAgICAgbW9kaWZpZXJzOiBbLi4ubmV4dE1vZGlmaWVycywgdXBkYXRlTW9kaWZpZXIsIGRpc2FibGVkQXBwbHlTdHlsZXNNb2RpZmllcl1cbiAgICB9KTtcbiAgfSwgW3N0cmF0ZWd5LCBwbGFjZW1lbnQsIHVwZGF0ZU1vZGlmaWVyLCBlbmFibGVkLCBuZXh0TW9kaWZpZXJzXSk7XG4gICgwLCBfcmVhY3QudXNlRWZmZWN0KSgoKSA9PiB7XG4gICAgaWYgKCFlbmFibGVkIHx8IHJlZmVyZW5jZUVsZW1lbnQgPT0gbnVsbCB8fCBwb3BwZXJFbGVtZW50ID09IG51bGwpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHBvcHBlckluc3RhbmNlUmVmLmN1cnJlbnQgPSAoMCwgX3BvcHBlci5jcmVhdGVQb3BwZXIpKHJlZmVyZW5jZUVsZW1lbnQsIHBvcHBlckVsZW1lbnQsIE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZywge1xuICAgICAgcGxhY2VtZW50LFxuICAgICAgc3RyYXRlZ3ksXG4gICAgICBtb2RpZmllcnM6IFsuLi5uZXh0TW9kaWZpZXJzLCBhcmlhRGVzY3JpYmVkQnlNb2RpZmllciwgdXBkYXRlTW9kaWZpZXJdXG4gICAgfSkpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAocG9wcGVySW5zdGFuY2VSZWYuY3VycmVudCAhPSBudWxsKSB7XG4gICAgICAgIHBvcHBlckluc3RhbmNlUmVmLmN1cnJlbnQuZGVzdHJveSgpO1xuICAgICAgICBwb3BwZXJJbnN0YW5jZVJlZi5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBzZXRTdGF0ZShzID0+IE9iamVjdC5hc3NpZ24oe30sIHMsIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgICAgICBzdHlsZXM6IHtcbiAgICAgICAgICAgIHBvcHBlcjoge31cbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIC8vIFRoaXMgaXMgb25seSBydW4gb25jZSB0byBfY3JlYXRlXyB0aGUgcG9wcGVyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbZW5hYmxlZCwgcmVmZXJlbmNlRWxlbWVudCwgcG9wcGVyRWxlbWVudF0pO1xuICByZXR1cm4gcG9wcGVyU3RhdGU7XG59XG52YXIgX2RlZmF1bHQgPSB1c2VQb3BwZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwibmFtZXMiOlsiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX3JlYWN0IiwicmVxdWlyZSIsIl9kZXF1YWwiLCJfdXNlU2FmZVN0YXRlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9wb3BwZXIiLCJfZXhjbHVkZWQiLCJvYmoiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInNvdXJjZSIsImV4Y2x1ZGVkIiwidGFyZ2V0Iiwic291cmNlS2V5cyIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJpIiwibGVuZ3RoIiwiaW5kZXhPZiIsImRpc2FibGVkQXBwbHlTdHlsZXNNb2RpZmllciIsIm5hbWUiLCJlbmFibGVkIiwicGhhc2UiLCJmbiIsInVuZGVmaW5lZCIsImFyaWFEZXNjcmliZWRCeU1vZGlmaWVyIiwiZWZmZWN0Iiwic3RhdGUiLCJyZWZlcmVuY2UiLCJwb3BwZXIiLCJlbGVtZW50cyIsImlkcyIsImdldEF0dHJpYnV0ZSIsInNwbGl0IiwiZmlsdGVyIiwiaWQiLCJ0cmltIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiam9pbiIsIl9wb3BwZXIkZ2V0QXR0cmlidXRlIiwicm9sZSIsInRvTG93ZXJDYXNlIiwiRU1QVFlfTU9ESUZJRVJTIiwidXNlUG9wcGVyIiwicmVmZXJlbmNlRWxlbWVudCIsInBvcHBlckVsZW1lbnQiLCJfcmVmIiwicGxhY2VtZW50Iiwic3RyYXRlZ3kiLCJtb2RpZmllcnMiLCJjb25maWciLCJwcmV2TW9kaWZpZXJzIiwidXNlUmVmIiwicG9wcGVySW5zdGFuY2VSZWYiLCJ1cGRhdGUiLCJ1c2VDYWxsYmFjayIsIl9wb3BwZXJJbnN0YW5jZVJlZiRjdSIsImN1cnJlbnQiLCJmb3JjZVVwZGF0ZSIsIl9wb3BwZXJJbnN0YW5jZVJlZiRjdTIiLCJwb3BwZXJTdGF0ZSIsInNldFN0YXRlIiwidXNlU3RhdGUiLCJhdHRyaWJ1dGVzIiwic3R5bGVzIiwiYXJyb3ciLCJ1cGRhdGVNb2RpZmllciIsInVzZU1lbW8iLCJyZXF1aXJlcyIsImZvckVhY2giLCJlbGVtZW50IiwibmV4dE1vZGlmaWVycyIsImRlcXVhbCIsInVzZUVmZmVjdCIsInNldE9wdGlvbnMiLCJjcmVhdGVQb3BwZXIiLCJhc3NpZ24iLCJkZXN0cm95IiwicyIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/usePopper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/useWaitForDOMRef.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/useWaitForDOMRef.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = useWaitForDOMRef;\nexports.resolveContainerRef = void 0;\nvar _ownerDocument = _interopRequireDefault(__webpack_require__(/*! dom-helpers/ownerDocument */ \"(ssr)/./node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/ownerDocument.js\"));\nvar _canUseDOM = _interopRequireDefault(__webpack_require__(/*! dom-helpers/canUseDOM */ \"(ssr)/./node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/canUseDOM.js\"));\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _useWindow = _interopRequireDefault(__webpack_require__(/*! ./useWindow */ \"(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/useWindow.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst resolveContainerRef = (ref, document)=>{\n    if (!_canUseDOM.default) return null;\n    if (ref == null) return (document || (0, _ownerDocument.default)()).body;\n    if (typeof ref === \"function\") ref = ref();\n    if (ref && \"current\" in ref) ref = ref.current;\n    if (ref && (\"nodeType\" in ref || ref.getBoundingClientRect)) return ref;\n    return null;\n};\nexports.resolveContainerRef = resolveContainerRef;\nfunction useWaitForDOMRef(ref, onResolved) {\n    const window = (0, _useWindow.default)();\n    const [resolvedRef, setRef] = (0, _react.useState)(()=>resolveContainerRef(ref, window == null ? void 0 : window.document));\n    if (!resolvedRef) {\n        const earlyRef = resolveContainerRef(ref);\n        if (earlyRef) setRef(earlyRef);\n    }\n    (0, _react.useEffect)(()=>{\n        if (onResolved && resolvedRef) {\n            onResolved(resolvedRef);\n        }\n    }, [\n        onResolved,\n        resolvedRef\n    ]);\n    (0, _react.useEffect)(()=>{\n        const nextRef = resolveContainerRef(ref);\n        if (nextRef !== resolvedRef) {\n            setRef(nextRef);\n        }\n    }, [\n        ref,\n        resolvedRef\n    ]);\n    return resolvedRef;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy91c2VXYWl0Rm9yRE9NUmVmLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLGtCQUFrQixHQUFHO0FBQ3JCQSxrQkFBZSxHQUFHRztBQUNsQkgsMkJBQTJCLEdBQUcsS0FBSztBQUNuQyxJQUFJSyxpQkFBaUJDLHVCQUF1QkMsbUJBQU9BLENBQUMsNkhBQTJCO0FBQy9FLElBQUlDLGFBQWFGLHVCQUF1QkMsbUJBQU9BLENBQUMscUhBQXVCO0FBQ3ZFLElBQUlFLFNBQVNGLG1CQUFPQSxDQUFDLHFLQUFPO0FBQzVCLElBQUlHLGFBQWFKLHVCQUF1QkMsbUJBQU9BLENBQUMseUlBQWE7QUFDN0QsU0FBU0QsdUJBQXVCSyxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSVYsVUFBVSxHQUFHVSxNQUFNO1FBQUVULFNBQVNTO0lBQUk7QUFBRztBQUM5RixNQUFNUCxzQkFBc0IsQ0FBQ1EsS0FBS0M7SUFDaEMsSUFBSSxDQUFDTCxXQUFXTixPQUFPLEVBQUUsT0FBTztJQUNoQyxJQUFJVSxPQUFPLE1BQU0sT0FBTyxDQUFDQyxZQUFZLENBQUMsR0FBR1IsZUFBZUgsT0FBTyxHQUFFLEVBQUdZLElBQUk7SUFDeEUsSUFBSSxPQUFPRixRQUFRLFlBQVlBLE1BQU1BO0lBQ3JDLElBQUlBLE9BQU8sYUFBYUEsS0FBS0EsTUFBTUEsSUFBSUcsT0FBTztJQUM5QyxJQUFJSCxPQUFRLGVBQWNBLE9BQU9BLElBQUlJLHFCQUFxQixHQUFHLE9BQU9KO0lBQ3BFLE9BQU87QUFDVDtBQUNBWiwyQkFBMkIsR0FBR0k7QUFDOUIsU0FBU0QsaUJBQWlCUyxHQUFHLEVBQUVLLFVBQVU7SUFDdkMsTUFBTUMsU0FBUyxDQUFDLEdBQUdSLFdBQVdSLE9BQU87SUFDckMsTUFBTSxDQUFDaUIsYUFBYUMsT0FBTyxHQUFHLENBQUMsR0FBR1gsT0FBT1ksUUFBUSxFQUFFLElBQU1qQixvQkFBb0JRLEtBQUtNLFVBQVUsT0FBTyxLQUFLLElBQUlBLE9BQU9MLFFBQVE7SUFDM0gsSUFBSSxDQUFDTSxhQUFhO1FBQ2hCLE1BQU1HLFdBQVdsQixvQkFBb0JRO1FBQ3JDLElBQUlVLFVBQVVGLE9BQU9FO0lBQ3ZCO0lBQ0MsSUFBR2IsT0FBT2MsU0FBUyxFQUFFO1FBQ3BCLElBQUlOLGNBQWNFLGFBQWE7WUFDN0JGLFdBQVdFO1FBQ2I7SUFDRixHQUFHO1FBQUNGO1FBQVlFO0tBQVk7SUFDM0IsSUFBR1YsT0FBT2MsU0FBUyxFQUFFO1FBQ3BCLE1BQU1DLFVBQVVwQixvQkFBb0JRO1FBQ3BDLElBQUlZLFlBQVlMLGFBQWE7WUFDM0JDLE9BQU9JO1FBQ1Q7SUFDRixHQUFHO1FBQUNaO1FBQUtPO0tBQVk7SUFDckIsT0FBT0E7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL29tMzY1Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0ByZXN0YXJ0K3VpQDEuNi42X3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9AcmVzdGFydC91aS9janMvdXNlV2FpdEZvckRPTVJlZi5qcz9lMWIxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXNlV2FpdEZvckRPTVJlZjtcbmV4cG9ydHMucmVzb2x2ZUNvbnRhaW5lclJlZiA9IHZvaWQgMDtcbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL293bmVyRG9jdW1lbnRcIikpO1xudmFyIF9jYW5Vc2VET00gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9jYW5Vc2VET01cIikpO1xudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbnZhciBfdXNlV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91c2VXaW5kb3dcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmNvbnN0IHJlc29sdmVDb250YWluZXJSZWYgPSAocmVmLCBkb2N1bWVudCkgPT4ge1xuICBpZiAoIV9jYW5Vc2VET00uZGVmYXVsdCkgcmV0dXJuIG51bGw7XG4gIGlmIChyZWYgPT0gbnVsbCkgcmV0dXJuIChkb2N1bWVudCB8fCAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkoKSkuYm9keTtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHJlZiA9IHJlZigpO1xuICBpZiAocmVmICYmICdjdXJyZW50JyBpbiByZWYpIHJlZiA9IHJlZi5jdXJyZW50O1xuICBpZiAocmVmICYmICgnbm9kZVR5cGUnIGluIHJlZiB8fCByZWYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSkgcmV0dXJuIHJlZjtcbiAgcmV0dXJuIG51bGw7XG59O1xuZXhwb3J0cy5yZXNvbHZlQ29udGFpbmVyUmVmID0gcmVzb2x2ZUNvbnRhaW5lclJlZjtcbmZ1bmN0aW9uIHVzZVdhaXRGb3JET01SZWYocmVmLCBvblJlc29sdmVkKSB7XG4gIGNvbnN0IHdpbmRvdyA9ICgwLCBfdXNlV2luZG93LmRlZmF1bHQpKCk7XG4gIGNvbnN0IFtyZXNvbHZlZFJlZiwgc2V0UmVmXSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKCgpID0+IHJlc29sdmVDb250YWluZXJSZWYocmVmLCB3aW5kb3cgPT0gbnVsbCA/IHZvaWQgMCA6IHdpbmRvdy5kb2N1bWVudCkpO1xuICBpZiAoIXJlc29sdmVkUmVmKSB7XG4gICAgY29uc3QgZWFybHlSZWYgPSByZXNvbHZlQ29udGFpbmVyUmVmKHJlZik7XG4gICAgaWYgKGVhcmx5UmVmKSBzZXRSZWYoZWFybHlSZWYpO1xuICB9XG4gICgwLCBfcmVhY3QudXNlRWZmZWN0KSgoKSA9PiB7XG4gICAgaWYgKG9uUmVzb2x2ZWQgJiYgcmVzb2x2ZWRSZWYpIHtcbiAgICAgIG9uUmVzb2x2ZWQocmVzb2x2ZWRSZWYpO1xuICAgIH1cbiAgfSwgW29uUmVzb2x2ZWQsIHJlc29sdmVkUmVmXSk7XG4gICgwLCBfcmVhY3QudXNlRWZmZWN0KSgoKSA9PiB7XG4gICAgY29uc3QgbmV4dFJlZiA9IHJlc29sdmVDb250YWluZXJSZWYocmVmKTtcbiAgICBpZiAobmV4dFJlZiAhPT0gcmVzb2x2ZWRSZWYpIHtcbiAgICAgIHNldFJlZihuZXh0UmVmKTtcbiAgICB9XG4gIH0sIFtyZWYsIHJlc29sdmVkUmVmXSk7XG4gIHJldHVybiByZXNvbHZlZFJlZjtcbn0iXSwibmFtZXMiOlsiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidXNlV2FpdEZvckRPTVJlZiIsInJlc29sdmVDb250YWluZXJSZWYiLCJfb3duZXJEb2N1bWVudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2NhblVzZURPTSIsIl9yZWFjdCIsIl91c2VXaW5kb3ciLCJvYmoiLCJyZWYiLCJkb2N1bWVudCIsImJvZHkiLCJjdXJyZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwib25SZXNvbHZlZCIsIndpbmRvdyIsInJlc29sdmVkUmVmIiwic2V0UmVmIiwidXNlU3RhdGUiLCJlYXJseVJlZiIsInVzZUVmZmVjdCIsIm5leHRSZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/useWaitForDOMRef.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/useWindow.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/useWindow.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports[\"default\"] = useWindow;\nexports.WindowProvider = void 0;\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _canUseDOM = _interopRequireDefault(__webpack_require__(/*! dom-helpers/canUseDOM */ \"(ssr)/./node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/canUseDOM.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst Context = /*#__PURE__*/ (0, _react.createContext)(_canUseDOM.default ? window : undefined);\nconst WindowProvider = Context.Provider;\n/**\n * The document \"window\" placed in React context. Helpful for determining\n * SSR context, or when rendering into an iframe.\n *\n * @returns the current window\n */ exports.WindowProvider = WindowProvider;\nfunction useWindow() {\n    return (0, _react.useContext)(Context);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy91c2VXaW5kb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsa0JBQWtCLEdBQUc7QUFDckJBLGtCQUFlLEdBQUdHO0FBQ2xCSCxzQkFBc0IsR0FBRyxLQUFLO0FBQzlCLElBQUlLLFNBQVNDLG1CQUFPQSxDQUFDLHFLQUFPO0FBQzVCLElBQUlDLGFBQWFDLHVCQUF1QkYsbUJBQU9BLENBQUMscUhBQXVCO0FBQ3ZFLFNBQVNFLHVCQUF1QkMsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlSLFVBQVUsR0FBR1EsTUFBTTtRQUFFUCxTQUFTTztJQUFJO0FBQUc7QUFDOUYsTUFBTUMsVUFBdUIsV0FBRixHQUFHLElBQUdMLE9BQU9NLGFBQWEsRUFBRUosV0FBV0wsT0FBTyxHQUFHVSxTQUFTQztBQUNyRixNQUFNVCxpQkFBaUJNLFFBQVFJLFFBQVE7QUFFdkM7Ozs7O0NBS0MsR0FDRGQsc0JBQXNCLEdBQUdJO0FBQ3pCLFNBQVNEO0lBQ1AsT0FBTyxDQUFDLEdBQUdFLE9BQU9VLFVBQVUsRUFBRUw7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbTM2NS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcmVzdGFydCt1aUAxLjYuNl9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvQHJlc3RhcnQvdWkvY2pzL3VzZVdpbmRvdy5qcz8yNjFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXNlV2luZG93O1xuZXhwb3J0cy5XaW5kb3dQcm92aWRlciA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgX2NhblVzZURPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL2NhblVzZURPTVwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuY29uc3QgQ29udGV4dCA9IC8qI19fUFVSRV9fKi8oMCwgX3JlYWN0LmNyZWF0ZUNvbnRleHQpKF9jYW5Vc2VET00uZGVmYXVsdCA/IHdpbmRvdyA6IHVuZGVmaW5lZCk7XG5jb25zdCBXaW5kb3dQcm92aWRlciA9IENvbnRleHQuUHJvdmlkZXI7XG5cbi8qKlxuICogVGhlIGRvY3VtZW50IFwid2luZG93XCIgcGxhY2VkIGluIFJlYWN0IGNvbnRleHQuIEhlbHBmdWwgZm9yIGRldGVybWluaW5nXG4gKiBTU1IgY29udGV4dCwgb3Igd2hlbiByZW5kZXJpbmcgaW50byBhbiBpZnJhbWUuXG4gKlxuICogQHJldHVybnMgdGhlIGN1cnJlbnQgd2luZG93XG4gKi9cbmV4cG9ydHMuV2luZG93UHJvdmlkZXIgPSBXaW5kb3dQcm92aWRlcjtcbmZ1bmN0aW9uIHVzZVdpbmRvdygpIHtcbiAgcmV0dXJuICgwLCBfcmVhY3QudXNlQ29udGV4dCkoQ29udGV4dCk7XG59Il0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInVzZVdpbmRvdyIsIldpbmRvd1Byb3ZpZGVyIiwiX3JlYWN0IiwicmVxdWlyZSIsIl9jYW5Vc2VET00iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJ3aW5kb3ciLCJ1bmRlZmluZWQiLCJQcm92aWRlciIsInVzZUNvbnRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/useWindow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/utils.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/utils.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nexports.__esModule = true;\nexports.isEscKey = isEscKey;\n/* eslint-disable import/prefer-default-export */ function isEscKey(e) {\n    return e.code === \"Escape\" || e.keyCode === 27;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHJlc3RhcnQrdWlAMS42LjZfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L3VpL2Nqcy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSxrQkFBa0IsR0FBRztBQUNyQkEsZ0JBQWdCLEdBQUdFO0FBQ25CLCtDQUErQyxHQUMvQyxTQUFTQSxTQUFTQyxDQUFDO0lBQ2pCLE9BQU9BLEVBQUVDLElBQUksS0FBSyxZQUFZRCxFQUFFRSxPQUFPLEtBQUs7QUFDOUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbTM2NS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcmVzdGFydCt1aUAxLjYuNl9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvQHJlc3RhcnQvdWkvY2pzL3V0aWxzLmpzP2Q3MTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmlzRXNjS2V5ID0gaXNFc2NLZXk7XG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0ICovXG5mdW5jdGlvbiBpc0VzY0tleShlKSB7XG4gIHJldHVybiBlLmNvZGUgPT09ICdFc2NhcGUnIHx8IGUua2V5Q29kZSA9PT0gMjc7XG59Il0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiaXNFc2NLZXkiLCJlIiwiY29kZSIsImtleUNvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@restart+ui@1.6.6_react-dom@18.2.0_react@18.2.0/node_modules/@restart/ui/cjs/utils.js\n");

/***/ })

};
;